<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Muhouer</title>
  
  <subtitle>就是做个记录，先来5分钟的！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://muhouer.github.io/"/>
  <updated>2019-07-25T18:11:02.942Z</updated>
  <id>https://muhouer.github.io/</id>
  
  <author>
    <name>Muhouer</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>拾句-开解自己</title>
    <link href="https://muhouer.github.io/posts/4be8e193/"/>
    <id>https://muhouer.github.io/posts/4be8e193/</id>
    <published>2019-07-25T18:06:00.000Z</published>
    <updated>2019-07-25T18:11:02.942Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>尝试着，放下已有的知识，让自己像孩子一样，慢慢的重新认识这个世界。即便暂时没有什么突破也不要紧，保持那个节奏，允许自己暂时没有突破。</strong></li><li><strong>为什么不要作弊，不是因为“作弊会对别的学生不公平”，也不是因为“作弊会败坏学校的风气”，而是作弊最终会把你困在一个自己不擅长也不喜欢的职业，困住你真正的人生追求…</strong>——加州大学伯克利分校的教授 BrianHarvey</li><li><strong>好人的皮囊穿久了，都快忘记了怎么做坏人。</strong></li><li><strong>不强求是美德，更是好方法。</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;&lt;li&gt;&lt;strong&gt;尝试着，放下已有的知识，让自己像孩子一样，慢慢的重新认识这个世界。即便暂时没有什么突破也不要紧，保持那个节奏，允许自己暂时没有突破。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;为什么不要作弊，不是因为“作弊会对别的学生不公平”，也不是因为“
      
    
    </summary>
    
      <category term="拾句" scheme="https://muhouer.github.io/categories/%E6%8B%BE%E5%8F%A5/"/>
    
    
      <category term="开解自己" scheme="https://muhouer.github.io/tags/%E5%BC%80%E8%A7%A3%E8%87%AA%E5%B7%B1/"/>
    
  </entry>
  
  <entry>
    <title>JVM是如何执行方法调用的?</title>
    <link href="https://muhouer.github.io/posts/f090e573/"/>
    <id>https://muhouer.github.io/posts/f090e573/</id>
    <published>2019-07-25T16:08:00.000Z</published>
    <updated>2019-07-25T16:08:24.333Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Java虚拟机" scheme="https://muhouer.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="方法调用" scheme="https://muhouer.github.io/tags/%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java虚拟机是如何加载Java类的？</title>
    <link href="https://muhouer.github.io/posts/2ce44cf1/"/>
    <id>https://muhouer.github.io/posts/2ce44cf1/</id>
    <published>2019-07-23T18:04:00.000Z</published>
    <updated>2019-07-25T17:56:02.602Z</updated>
    
    <content type="html"><![CDATA[<p>从 class 文件到内存中的类，按先后顺序需要经过加载、链接以及初始化三大步骤。其中，链接过程中同样需要验证；而内存中的类没有经过初始化，同样不能使用。</p><p>Java 语言的类型分为两大类——基本类型(primitive types)和引用类型(reference types)，其中引用类型分为4种：类、接口、数组类和泛型参数。由于泛型参数会在编译过程中被擦除，因此 Java 虚拟机实际上只有前三种。在类、接口和数组类中，数组类是由 Java 虚拟机直接生成的，其他两种则有对应的字节流。</p><p>字节流最常见的形式要属由 Java 编译器生成的 class 文件。除此之外，我们也可以在程序内部直接生成，或者从网格中获取(例如网页中内嵌的小程序 Java applet)字节流。这些不同形式的字节流，都会被加载到 Java虚拟机中，成为类或接口。为了叙述方便，接下来统一使用“类”来称呼。</p><p>无论是直接生成的数组类，还是加载的类，Java 虚拟机都需要对其进行链接和初始化。</p><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>加载，是指查找字节流，并且据此创建类的过程。对于非 Java 虚拟机直接生成的类来说，Java 虚拟机需要借助类加载器来完成查找字节流的过程。</p><p>类加载器的“祖师爷”叫启动类加载器(bootstrap class loader)，它是由 c++ 实现的，没有对应的 Java 对象，因此在 Java 中只能用 null 来指代。</p><p>除了启动类加载器之外，其他的类加载器都是<code>java.lang.ClassLoader</code>的子类，因此有对应的 Java 对象。这些类加载器需要先由另一个类加载器，比如说启动类加载器，加载至 Java 虚拟机中，方能执行类加载。</p><p>双亲委派模型：每当一个类加载器接收到加载请求时，它会先将请求转发给<code>父 类加载器</code>。在<code>父 类加载器</code>没有找到所请求的情况下，该类加载器才会尝试去加载。</p><p>在 Java 9 之前，启动类加载器负责加载最为基础、最为重要的类，比如存放在 JRE 的 lib 目录下 jar 包的类以及由虚拟机参数<code>-Xbootclasspath</code>指定的类。除了启动类加载器之外，另外两个重要的类加载器是扩展类加载器(extension class loader)和应用类加载器(application class loader)，均由 Java 核心类库提供。</p><p>扩展类加载器的<code>父 类加载器</code>是启动类加载器。它负责加载相对次要的、但又通用的类，比如存放在 JRE 的 <code>lib/ext</code>目录下 jar 包中的类(以及由系统变量 <code>java.ext.dirs</code>指定的类)。</p><p>应用类加载器的<code>父 类加载器</code>是扩展类加载器。它负责加载应用程序路径下的类。即虚拟机参数 <code>-cp/-classpath</code>、系统变量<code>java.class.path</code>或环境变量 <code>CLASSPATH</code>所指定的路径。默认情况下，应用程序所包含的类便是应用类加载器加载的。</p><p>Java 9 引入了模块系统，并且略微更改了上述的类加载。扩展类加载器改名为平台类加载器(platform class loader)。Java SE 中除了少数几个关键模块之外，其他模块均由平台类加载器所加载。</p><p>除了由 Java 核心类库提供的类加载器外，我们还可以加入自定义的类加载器，来实现特殊的加载方式。例如：我们可以对 class 文件进行加密，加载时再利用自定义的类加载器对其进行解密。</p><p>除了加载功能外，类加载器还提供了命名空间的作用。在 Java 虚拟机中，类的唯一性是由类加载器实现以及类的全名一同确定的。即便是同一串字节流，经由不同的类加载器加载，也会得到两个不同的类。在大型应用中，我们会借助这一特性，来运行同一个类的不同版本。</p><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p>链接，是指将创建的类合并至 Java 虚拟机中，使之能够执行的过程。它可分为验证、准备以及解析三个阶段。</p><p>验证阶段的目的，在于确保被加载类能够满足 Java 虚拟机的约束条件。准备阶段的目的，则是为被加载类的静态字段分配内存。Java 代码中对静态字段的具体初始化，则在稍后的初始化阶段进行。除了分配内存外，部分 Java 虚拟机还会在此阶段构造其他跟类层次相关的数据结构，比如说用来实现虚方法的动态绑定的方法表。</p><p>在 class 文件被加载到 Java 虚拟机之前，这个类无法知道其他类及其方法、字段所对应的具体地址。甚至不知道自己方法、字段的地址。因此，每当需要引用这些成员时，Java 编译器会生成一个符号引用。在运行阶段，这个符号引用一般都能无歧义地定位到具体目标上。</p><p>解析阶段的目的，正是将这些符号引用解析成为实际引用。如果符号引用指向一个未被加载的类，或未被加载类的字段或方法，那么解析将触发这个类的加载(未必触发这个类的链接以及初始化)。</p><p>Java虚拟机规范并没有要求在链接过程中完成解析。它仅规定了：如果某些字节码使用了符号引用，那么在执行这些字节码之前，需要完成对这些符号引用的解析。</p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>在 Java 代码中，如果要初始化一个静态字段，我们可以在声明时直接赋值，也可以在静态代码块中对其赋值。</p><p>如果直接赋值的静态字段被<code>final</code>所修饰，并且它的类型是基本类型或字符串时，那么该字段便会被 Java 编译器标记成常量值(ConstantValue)，其初始化直接由 Java 虚拟机完成。除此之外，直接赋值操作，以及所有静态代码块中的代码，则会被 Java 编译器置于同一方法中，并把它命名为<code>&lt;clinit&gt;</code>，即 <code>class init</code>。</p><p>类加载的最后一步是初始化，便是为标记为常量值的字段赋值，以及执行<code>&lt;clinit&gt;</code>方法的过程。 Java 虚拟机会通过加锁来确保类的<code>&lt;clinit&gt;</code>方法仅被执行一次。只有初始化完成之后，类才正式成为可执行的状态。</p><p>类的初始化触发情况：</p><ol><li>当虚拟机启动时，初始化用户指定的主类；</li><li>当遇到用以创建模板类实例的 new 指令时，初始化 new 指令的目标类；</li><li>当遇到调用静态方法的指令时，初始化该静态方法所在的类；</li><li>当遇到访问静态字段的指令时，初始化该静态字段所在的类；</li><li>子类的初始化会触发父类的初始化；</li><li>如果一个接口定义了<code>default</code>方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化；</li><li>使用反射 API 对某个类进行反射调用时，初始化这个类；</li><li>当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Java中所有的非私有实例方法，都算是虚方法。调用这些方法的指令，也区分直接调用和虚调用。</p><p>被<code>final</code>修饰的静态成员变量，如果不是基本类型或字符串，也会放在<code>clinit</code>来做。</p><p>链接时取得的不是被加载类的地址，而是被加载类所调用的其他方法的地址。</p><p>在加载阶段就已经生成了 class 结构，已经写入方法区，只是被标记为未链接而暂时不能使用，如果验证失败会报错退出。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从 class 文件到内存中的类，按先后顺序需要经过加载、链接以及初始化三大步骤。其中，链接过程中同样需要验证；而内存中的类没有经过初始化，同样不能使用。&lt;/p&gt;&lt;p&gt;Java 语言的类型分为两大类——基本类型(primitive types)和引用类型(reference
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="https://muhouer.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="Java类加载" scheme="https://muhouer.github.io/tags/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Java的基本类型</title>
    <link href="https://muhouer.github.io/posts/12a97f14/"/>
    <id>https://muhouer.github.io/posts/12a97f14/</id>
    <published>2019-07-23T18:02:00.000Z</published>
    <updated>2019-07-24T17:59:26.246Z</updated>
    
    <content type="html"><![CDATA[<p>在 <a href="https://baike.baidu.com/item/smalltalk/1379989?fr=aladdin]" target="_blank" rel="noopener">Smalltalk</a> 中，所有的值都是对象。因此，许多人认为它是一门纯粹的面向对象语言。Java 则不同，它引进了八个基本类型，用来支撑数值计算。Java 这么做主要是出于工程上的考虑，使用基本类型能够在执行效率以及内存使用两方面提升软件性能。</p><h2 id="Java-虚拟机的-boolean-类型"><a href="#Java-虚拟机的-boolean-类型" class="headerlink" title="Java 虚拟机的 boolean 类型"></a>Java 虚拟机的 boolean 类型</h2><p>在 Java 语言规范中，<code>boolean</code>类型的值只有两种可能，分别使用符合<code>true</code>和<code>false</code>来表示。</p><p>在 Java 虚拟机规范中， <code>boolean</code>类型则被映射成<code>int</code>类型，具体来说，<code>true</code>被映射为整数1，<code>false</code>被映射为整数0。这个编码规则约束了 Java 字节码的具体实现。</p><p>Java 虚拟机规范同时也要求 Java 编译器遵守这个编码规则，并且使用整数相关的字节码来实现逻辑运算。当然，这个约束很容易绕开，除了汇编工具 <code>AsmTools</code>外，还有许多可以修改字节码的 Java 库，比如<a href="https://asm.ow2.io" target="_blank" rel="noopener">ASM</a></p><h2 id="Java-的基本类型"><a href="#Java-的基本类型" class="headerlink" title="Java 的基本类型"></a>Java 的基本类型</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>值域</strong></th><th><strong>默认值</strong></th><th><strong>虚拟机内部符号</strong></th></tr></thead><tbody><tr><td>boolean</td><td>{false, true}</td><td>false</td><td>Z</td></tr><tr><td>byte</td><td>[-128, 127]</td><td>0</td><td>B</td></tr><tr><td>short</td><td>[-32768, 32767]</td><td>0</td><td>S</td></tr><tr><td>char</td><td>[0, 65535]</td><td>‘\u000’</td><td>C</td></tr><tr><td>int</td><td>[-2^31, 2^31-1]</td><td>0</td><td>I</td></tr><tr><td>long</td><td>[-2^63, 2^63-1]</td><td>0L</td><td>J</td></tr><tr><td>float</td><td>~[-3.4E38, 3.4E38]</td><td>+0.0F</td><td>F</td></tr><tr><td>double</td><td>~[-1.8E308, 1.8E308]</td><td>+0.0D</td><td>D</td></tr></tbody></table><ol><li><code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code>、<code>float</code>以及<code>double</code>的值域依次扩大，而且前面的值被后面的值域所包含。因此从前面的基本类型转换至后面的基本类型，无需强制转换。</li><li>它们的默认值看起来都不一样，但在内存中都是0。</li><li>这些基本类型中，<code>boolean</code>和<code>char</code>是唯二的无符号类型。</li><li>声明为<code>byte</code>、<code>char</code>以及<code>short</code>的局部变量，能够存储它们取值范围的数值，但在正常使用 Java 编译器的情况下，生成的字节码会遵守 Java 虚拟机规范对编译器的约束。</li></ol><h2 id="Java-浮点数"><a href="#Java-浮点数" class="headerlink" title="Java 浮点数"></a>Java 浮点数</h2><p>Java 的浮点数采用 IEEE 754 浮点数格式。以 <code>float</code> 为例，浮点数类型通常有两个0，+0.0F以及-0.0F。前者在 Java 里是0，后者是符号位为1、其它位均为0的浮点数，在内存中等同于十六进制整数0x8000000。尽管它们的内存数值不同，但是在 Java 中+0.0F==-0.0F 会返回真。</p><p>浮点数中的正无穷：任意正浮点数除以 +0.0F 得到的值，在内存中等同于0x7F800000;<br>浮点数中的负无穷：任意正浮点数除以 -0.0F 得到的值，在内存中等同于0xFF800000。</p><p>标准 NaN(Not-a-Number)：通过+0.0F/+0.0F 计算得到，在内存中为0x7FC00000；<br>非标准 NaN(Not-a-Number)：0x7F800001、0x7FFFFFF、0xFF800001、0xFFFFFFFF等</p><p>NaN 和其它浮点数相比较，除了<code>!=</code>始终返回<code>true</code>外，所有其它比较结果均会返回<code>false</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    System.out.println(Float.floatToIntBits(0.0F)); //0</span><br><span class="line">    System.out.println(Float.floatToIntBits(-0.0F)); //-2147483648</span><br><span class="line">    System.out.println(Float.floatToIntBits(0.0F/0.0F)); //2143289344</span><br><span class="line">    System.out.println(0x7FC00000); //2143289344</span><br><span class="line">    System.out.println(Float.intBitsToFloat(0x7F800001)); //NaN</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-基本类型的大小"><a href="#Java-基本类型的大小" class="headerlink" title="Java 基本类型的大小"></a>Java 基本类型的大小</h2><p>Java 虚拟机每调用一个 Java 方法，便会创建一个栈帧。为了方便解释，这里只讨论供解释器使用的解释栈帧(Interpreted frame)。该栈帧有两个主要组成部分，分别是局部变量区以及字节码的操作数栈。这里的局部变量是广义的，除了普通意义下的局部变量外，它还包含实例方法的”this指针”以及方法所接收的参数。</p><p>在 Java 虚拟机规范中，局部变量等价于一个数组，并且可以用正整数来索引。除了 long、double 值需要用两个数组单元来存储外，其他基本类型以及引用类型的值均占用一个数组单元。即 boolean、byte、char、short 这四种类型，在栈上占用的空间和 int 一样，和引用类型也一样。因此，在32位的HotSpot 中，这些类型将占用4个字节，而在64位的 HotSpot 中，他们将占用8个字节。(int 所包含的数据是4字节，由于 JVM 栈的实现方式，它们实际使用的内存可能占用得更多)</p><p>当然这种情况仅仅存在于局部变量，并不会出现在存储于堆上的字段或者数组元素。对于 byte、char以及 short 这三种类型的字段或数组单元，它们在堆上占用的空间分别为1字节、2字节以及2字节。(变长数组不好控制，所以选择浪费一些空间，以便访问时直接通过下标来计算地址)</p><p>当我们将一个 int 类型的值，存储到这些类型的字段或数组时，相当于做了一次隐式的掩码操作。举例来说，当我们把0xFFFFFFFF(-1)存储到一个声明为 char 类型的字段里时，由于该字段仅占用1字节，所以高两位的字节便会被截取掉，最终存入“\uFFFF”。</p><p>boolean 和 boolean 数组比较特殊，在 HotSpot 中，boolean 字段占用一字节，而boolean 数组直接使用 byte 数组来实现。为了保证堆中的 boolean 值是合法的，HotSpot 在存储时显式进行掩码操作，即只取最后一位的值存入 boolean 字段或数组中。</p><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>Java 虚拟机的算数运算几乎全部依赖于操作数栈。也就是说，我们需要将堆中的 boolean、byte、char 以及 short 加载到操作数栈上，而后将栈上的值当成int类型来运算。</p><p>对于 boolean、char这两类无符号类型来说，加载伴随着零扩展，例如：在加载时 char 的值会被复制到 int 类型的低二字节，而高二字节会用0来填充。</p><p>对于byte、short这两个类型来说，加载伴随着符号扩展，例如：在加载时，short 值同样会被复制到 int 类型的低二字节。如果该 short 值为非负数，即最高位为0，那么该 int 类型的值的高二字节会用0来填充，否则用1来填充。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>ASM 是字节码工程包，它提供了字节码抽象的工具，允许用 Java 代码来生成或更改字节码。JDK里也会使用 ASM 来生成一些适配器什么的。</p><p>Unsafe 就是一些不被虚拟机控制的内存操作的合集，需要根据 API 来了解。</p><p>CAS 可以理解为原子性的写操作，概念来自于底层 CPU 指令。Unsafe 提供了一些 cas 的 Java 接口，在即时编译器中我们会将对这些接口的调用替换成具体的 CPU 指令</p><p>测试 NaN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    float nan1 = 0.0f/0.0f;</span><br><span class="line">    float f =  0.0f;</span><br><span class="line">    float nan2 = f/f;</span><br><span class="line">    double d = 0.0;</span><br><span class="line">    System.out.println(&quot;nan1 raw: &quot; + Integer.toHexString(Float.floatToRawIntBits(nan1)));</span><br><span class="line">    System.out.println(&quot;nan1: &quot; + Integer.toHexString(Float.floatToIntBits(nan1)));</span><br><span class="line">    System.out.println(&quot;nan2 raw: &quot; + Integer.toHexString(Float.floatToRawIntBits(nan2)));</span><br><span class="line">    System.out.println(&quot;nan2: &quot; + Integer.toHexString(Float.floatToIntBits(nan2)));</span><br><span class="line">    System.out.println(&quot;nan3 raw: &quot; + Long.toHexString(Double.doubleToRawLongBits(0.0/0.0)));</span><br><span class="line">    System.out.println(&quot;nan3: &quot; + Long.toHexString(Double.doubleToLongBits(0.0/0.0)));</span><br><span class="line">    System.out.println(&quot;nan4 raw: &quot; + Long.toHexString(Double.doubleToRawLongBits(d/d)));</span><br><span class="line">    System.out.println(&quot;nan4: &quot; + Long.toHexString(Double.doubleToLongBits(d/d)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nan1 raw: 7fc00000</span><br><span class="line">nan1: 7fc00000</span><br><span class="line">nan2 raw: ffc00000</span><br><span class="line">nan2: 7fc00000</span><br><span class="line">nan3 raw: 7ff8000000000000</span><br><span class="line">nan3: 7ff8000000000000</span><br><span class="line">nan4 raw: fff8000000000000</span><br><span class="line">nan4: 7ff8000000000000</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>如果不使用 raw 方法进行 NaN 的转换，采用 <code>0.0f/0.0f</code> 或 先定义变量<code>f = 0.0f</code>再进行<code>f/f</code>的计算，最终结果是一样的，但是如果使用 raw 方法进行转换，结果会有所不同，如:<code>nan1 raw: 7fc00000</code>和<code>nan2 raw: ffc00000</code>，原因是前者是 Java编译器给出的，后者是 CPU 用 DIVSS 指令计算出来的，跟具体的 CPU 实现有关系。由于都是 NaN，理论上哪个值都是正确的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 &lt;a href=&quot;https://baike.baidu.com/item/smalltalk/1379989?fr=aladdin]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Smalltalk&lt;/a&gt; 中，所有的值都是对象。因此，许多人认为它是
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="https://muhouer.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="Java基本类型" scheme="https://muhouer.github.io/tags/Java%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java代码是怎么运行的？</title>
    <link href="https://muhouer.github.io/posts/6e9f02ed/"/>
    <id>https://muhouer.github.io/posts/6e9f02ed/</id>
    <published>2019-07-23T16:24:00.000Z</published>
    <updated>2019-07-23T18:03:16.853Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><code>Java</code>代码有很多种不同的运行方式，比如在开发工具中运行、双击<code>jar</code>文件运行、在命令行中运行、在网页中运行等，不过这些执行方式都离不开<code>JRE</code>，即Java运行时环境(Java Runtime Environment)。</p><p>实际上，<code>JRE</code>仅包含Java程序的必需组件，包括<code>Java</code>虚拟机以及<code>Java</code>核心类库等。我们通常接触的<code>JDK</code>(Java开发工具包)同样包含了<code>JRE</code>，并且还附带了一系列开发、诊断工具。</p><h2 id="为什么-Java-要在虚拟机里运行？"><a href="#为什么-Java-要在虚拟机里运行？" class="headerlink" title="为什么 Java 要在虚拟机里运行？"></a>为什么 Java 要在虚拟机里运行？</h2><p>Java作为一门高级程序语言，它的语法非常复杂，抽象程度也很高。因此直接在硬件上运行这种复杂的程序不太现实。所以，在运行 Java 程序之前需要对其进行一番转换。（C++ 的策略是直接编译成目标架构的机器码，Java的策略是编译成一个虚拟架构的机器码。）</p><p>这个转换操作是怎么操作的呢？当前主流思路是这样：设计一个面向Java语言特性的虚拟机，并通过编译器将 Java 程序转换成该虚拟机能识别的指令序列，即 Java 字节码(Java字节码指令的操作码被固定为一个字节)。</p><p>Java虚拟机可以由硬件(Java procesor)实现，但更为常见的是在各个现有平台(如Windows ——x64、Linux_aarch64)上提供软件实现。这样一来，一旦一个程序被转换成 Java 字节码，它就可以在不同平台实现的虚拟机实现里运行，即“一次编译，到处运行。”</p><p>除此之外，虚拟机还提供了一个托管环境(Managed Runtime)。这个托管环境能够代替我们处理一些代码中冗长而且容易出错的部分。比如：自动内存管理与垃圾回收、数据越界、动态类型、安全权限等等动态监测。</p><h2 id="Java-虚拟机具体怎样运行-Java-字节码的？"><a href="#Java-虚拟机具体怎样运行-Java-字节码的？" class="headerlink" title="Java 虚拟机具体怎样运行 Java 字节码的？"></a>Java 虚拟机具体怎样运行 Java 字节码的？</h2><h3 id="虚拟机角度"><a href="#虚拟机角度" class="headerlink" title="虚拟机角度"></a>虚拟机角度</h3><p>执行 Java 代码首先需要将它编译成的 class 文件加载到 Java 虚拟机中。加载后的 Java 类会被存放于方法区(Method Area)中，实际运行时，虚拟机会执行方法区内的代码。</p><p>Java虚拟机会将内存划分为堆和栈来存储运行时数据。Java 虚拟机将栈细分为面向 Java 方法的 Java 方法栈，面向本地方法(用C++写的 native 方法)的本地方法栈，以及存放各个线程执行位置的 PC 寄存器。</p><img src="/images/jvm_memory_partition.png" width="700px" height="400px" align="center"><p>在运行过程中，每当调用进入一个 Java 方法，Java虚拟机会在当前线程的 Java 方法栈中生成一个栈帧，用以存放局部变量以及字节码的操作数。这个栈帧的大小是提前计算好的，而且 Java 虚拟机不要求栈帧在内存空间里连续分布。</p><p>当退出当前执行的方法时，不管是正常返回还是异常返回，Java 虚拟机均会弹出当前线程的当前栈帧，并将之舍弃。</p><h3 id="硬件角度"><a href="#硬件角度" class="headerlink" title="硬件角度"></a>硬件角度</h3><p>Java 字节码无法直接执行，需要 Java 虚拟机将字节码翻译成机器码。</p><p>在HotSpot中，上述翻译过程有两种形式：第一种是解释执行，即逐条将字节码翻译成机器码并执行；第二种是即时翻译(Just-In-Time compilation, JIT)，即将一个方法中包含的所有字节码翻译成机器码后再执行。</p><img src="/images/jvm_compilation.png" width="500px" height="500px" align="center"><p>前者优势是无需等待编译，后者优势在于实际运行速度更快。HotSpot 默认采用混合模式，综合解释执行和即时编译的优点。它会先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。</p><h2 id="Java-虚拟机的运行效率是怎么样的？"><a href="#Java-虚拟机的运行效率是怎么样的？" class="headerlink" title="Java 虚拟机的运行效率是怎么样的？"></a>Java 虚拟机的运行效率是怎么样的？</h2><p>HotSpot 采用了多种技术来提升启动性能以及峰值性能。</p><p>即时编译建立在程序符合二八定律的假设之上，即百分之二十的代码占用了百分之八十的计算资源。对于占据大部分的不常用的代码，我们无需耗费时间将其编译成机器码，而是采取解释执行的方式运行；另一方面，对于仅占据小部分的热点代码，我们则可以将其编译成机器码，以达到理想的运行速度。</p><p>理论上讲，即时编译后的 Java 程序的执行效率是可能超过 C++ 程序的。这是因为与静态编译相比，即时编译拥有程序的运行时信息，并且可以根据这个信息作出相应优化。比如：一个虚方法的调用，尽管它有很多个目标方法，但是在实际运行过程中它可能只调用其中的一个。这个信息就可以被即时编译器所利用，来规避虚方法调用的开销，从而达到比静态编译的 C++ 程序更高的性能。</p><p>为了满足不同用户场景的需要，HotSpot 内置了多个即时编译器：C1、C2 和 Graal。其中 Graal 是Java 10正式引入的实验性即时编译器。这样以来就可以在编译时间和生成代码的执行效率上进行取舍。</p><p>C1 又叫做 Client 编译器，面向的是对启动性能有要求的客户端 GUI 程序，采用的优化手段相对简单，因此编译时间较短。</p><p>C2 又叫做 Server 编译器，面向的是对峰值性能有要求的服务端程序，采用的优化手段相对复杂，因此编译时间较长，但同时生成代码的执行效率较高。</p><p>从 Java 7 开始，HotSpot 的即时编译是放在额外的编译栈程中进行的。HotSpot 会根据 CPU 的数量设置编译线程的数目，并且按 1:2 的比例配置还给 C1 和 C2编译器。</p><p>在资源充足的情况下，字节码的解释执行和即时编译可同时进行。编译完成后的机器码会在下次调用该方法时启用，以替换原本的解释执行。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Java 语言和 Java 虚拟机看待<code>boolean</code>类型的方式是否不同？<br>Java 虚拟机将 boolean 类型看成 int 型 0 和 1 进行处理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Foo.java</span><br><span class="line">public class Foo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">boolean flag = true;</span><br><span class="line">if (flag) &#123;</span><br><span class="line">        System.out.println(&quot;Hello, Java!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">if (flag == true) &#123; </span><br><span class="line">        System.out.println(&quot;Hello, JVM!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ # linux环境</span><br><span class="line">$ javac Foo.java</span><br><span class="line">$ java Foo</span><br><span class="line">$ # 两个都打印</span><br><span class="line">$ # 反汇编器与汇编器 将flag对应的值iconst_1改成了iconst_2</span><br><span class="line">$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jdis.Main Foo.class &gt; Foo.jasm.1</span><br><span class="line">$ awk &apos;NR==1,/iconst_1/&#123;sub(/iconst_1/, &quot;iconst_2&quot;)&#125; 1&apos; Foo.jasm.1 &gt; Foo.jasm  </span><br><span class="line">$ java -cp /path/to/asmtools.jar org.openjdk.asmtools.jasm.Main Foo.jasm</span><br><span class="line">$ java Foo</span><br><span class="line">$ # 第二个不打印</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="热点代码探测"><a href="#热点代码探测" class="headerlink" title="热点代码探测"></a>热点代码探测</h3><p>热点代码探测有两种算法——基于采样的热点探测和基于计数器的热点探测。</p><p>一般采样的是基于计数器的热点探测，这种算法有两个计数器，方法调用计数器和回边计数器，它们在 C1 和 C2 中有不同的阈值。</p><h3 id="对于性能要求高的-web-应用为什么不直接使用即时编译器在启动时全部编译成机器码呢？"><a href="#对于性能要求高的-web-应用为什么不直接使用即时编译器在启动时全部编译成机器码呢？" class="headerlink" title="对于性能要求高的 web 应用为什么不直接使用即时编译器在启动时全部编译成机器码呢？"></a>对于性能要求高的 web 应用为什么不直接使用即时编译器在启动时全部编译成机器码呢？</h3><p>对于长时间运行的程序来说，大部分编译就发生在前几个小时。再之后的即时编译主要是一些非热点代码，以及即时编译器中的 bug 造成的反复去优化重新编译。JVM 这么做主要也是看中字节码的可移植性，从而牺牲了启动性能。JVM 也引入了 AOT 编译，在线下将 Java 代码编译成可链接库。</p><h3 id="为什么理论上比-C-快？"><a href="#为什么理论上比-C-快？" class="headerlink" title="为什么理论上比 C++ 快？"></a>为什么理论上比 C++ 快？</h3><p>实际上会插入一些虚拟机相关的代码。现代编译器一般都分为平台无关的前端和平台相关的后端。如果要生成某个平台的代码，编译器会选择相应的后端。因此，无论是 C 编译器还是 JIT 编译器，都是基于目标 CPU 的指令集来做优化的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Java&lt;/code&gt;代码有很多种不同的运行方式，比如在开发工具中运行、双击&lt;code&gt;jar&lt;/code&gt;文件
      
    
    </summary>
    
      <category term="Java虚拟机" scheme="https://muhouer.github.io/categories/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
    
      <category term="代码运行" scheme="https://muhouer.github.io/tags/%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>深入拆解Java虚拟机</title>
    <link href="https://muhouer.github.io/posts/ec055895/"/>
    <id>https://muhouer.github.io/posts/ec055895/</id>
    <published>2019-07-23T15:48:00.000Z</published>
    <updated>2019-07-25T16:10:07.704Z</updated>
    
    <content type="html"><![CDATA[<p><strong>极客时间《深入拆解Java虚拟机》 | 郑雨迪 | Oracle高级研究员</strong></p><p>好记性不如烂笔头，做下笔记顺便加强一下记忆，之前了解虚拟机笔记零散，准备借此机会梳理一下。</p><h2 id="为什么我们要学习Java虚拟机？"><a href="#为什么我们要学习Java虚拟机？" class="headerlink" title="为什么我们要学习Java虚拟机？"></a>为什么我们要学习Java虚拟机？</h2><p>“知其然”也要“知其所以然”，学习Java虚拟机的本质，更多是了解Java程序是如何被执行且优化的。这样一来，你才可以从内部入手，达到高效编程的目的。与此同时，你也可以为学习更深层级、更为核心的Java技术打好基础。</p><p>了解Java虚拟机有如下好处：</p><ol><li><p>优化：Java虚拟机提供了很多配置参数，用于满足不同应用场景下，对程序性能的需求。学习Java虚拟机，你可以针对自己的应用，最优化匹配运行参数。</p></li><li><p>避险：Java虚拟机本身是一种工程产品，在实现过程中自然存在不少局限性。学习Java虚拟机，可以更好地规避它在使用过程中的bug，也可以更快地识别出Java虚拟机中的错误。</p></li><li><p>触类旁通：Java虚拟机拥有当前最前沿、最成熟的垃圾回收算法，以及即时编译器实现。学习Java虚拟机，我们可以了解其背后的设计决策，今后再遇到其他代码托管技术也能触类旁通。</p></li><li><p>百发齐放：Java虚拟机发展到今天，已经脱离Java语言，形成一套相对独立的、高性能的执行方案。除了Java以外，Scala、Clojure、Groovy，以及时下热门的Kotlin，这些语言都可以运行在Java虚拟机上。学习Java虚拟机，便可以了解这些语言的通用机制，甚至于让这些语言共享生态系统。</p></li></ol><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>剖析Java虚拟机的运行机制，逐一介绍Java虚拟机的设计决策以及工程实现。</p><ol><li><a href="/posts/6e9f02ed/" title="Java代码是怎么运行的？">Java代码是怎么运行的？</a></li><li><a href="/posts/12a97f14/" title="Java的基本类型">Java的基本类型</a></li><li><a href="/posts/2ce44cf1/" title="Java虚拟机是如何加载Java类的？">Java虚拟机是如何加载Java类的？</a></li><li></li><li></li></ol><h2 id="高效实现"><a href="#高效实现" class="headerlink" title="高效实现"></a>高效实现</h2><p>探索Java编译器，以及内嵌于Java虚拟机中的即时编译器，帮助你更好地理解Java语言特性，继而写出简洁高效的代码。</p><h2 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h2><p>介绍如何利用工具定位并解决代码中的问题，以及在已有工具不适用的情况下，打造专属轮子。</p><h2 id="虚拟机黑科技"><a href="#虚拟机黑科技" class="headerlink" title="虚拟机黑科技"></a>虚拟机黑科技</h2><p>介绍甲骨文实验室近年来的前沿工作之——GraalVM。包括如何在JVM上高效运行其他语言；如何混搭这些编程语言，实现Polyglot；如何将这些语言事前编译(Ahead-Of-Time, AOT)成机器指令，单独运行甚至嵌入数据库中运行。</p><img src="/images/jvm_201907231215.png" width="1000px" height="1000px" align="center">]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;极客时间《深入拆解Java虚拟机》 | 郑雨迪 | Oracle高级研究员&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;好记性不如烂笔头，做下笔记顺便加强一下记忆，之前了解虚拟机笔记零散，准备借此机会梳理一下。&lt;/p&gt;&lt;h2 id=&quot;为什么我们要学习Java虚拟机？&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="笔记" scheme="https://muhouer.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Java虚拟机" scheme="https://muhouer.github.io/tags/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>拾句-丧</title>
    <link href="https://muhouer.github.io/posts/60ae6d78/"/>
    <id>https://muhouer.github.io/posts/60ae6d78/</id>
    <published>2019-07-16T16:30:00.000Z</published>
    <updated>2019-07-25T18:11:47.730Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>可能会太丧，不建议一次性食用，千万不要贪杯哦~</strong></p></blockquote><blockquote><p><strong>别人都祝你快乐，我只愿你，遍历山河，觉得人间值得。</strong>——夫禾《禾叔的杂货铺》</p></blockquote><h3 id="001"><a href="#001" class="headerlink" title="001"></a>001</h3><hr><ol><li><strong>我希望她三十岁没嫁，我也不希望她三十岁没嫁。</strong>——网易云音乐《三十岁的女人》热评</li><li><strong>我从未拥有过你一秒钟，心里却失去过你千万次。</strong>——网易云音乐《再见二丁目》热评</li><li><strong>慢慢大家会明白的，互相喜欢的两个人无法在一起，其实是人生的常态。</strong>———网易云《三角题》热评</li><li><strong>不在一起就不在一起吧，反正一辈子也没多长。</strong>——网易云音乐《关于郑州的记忆》热评</li><li><strong>多数人25岁就死了，但直到75岁才埋。</strong>——网易云音乐《杀死那个石家庄人》热评</li><li><strong>电影太仁慈，总能让错过的人重新相遇，生活不一样，有些人说过再见就再也不见了。</strong>——出处不详</li><li><strong>她的手只有我的手四分之三那么大，可我还是没能抓住。</strong>——网易云音乐《一生所爱》热评</li><li><strong>那时候没有手机没有网络，只能通过书信来往，才会有这样依依不舍，现在的人很难感受到那种离别后再无音讯的难舍了。</strong>——网易云音乐《离别的车站》热评</li><li><strong>希望我是一个让你心动的人，而不是权衡取舍分析利弊后，觉得不错的人。</strong>——出处不详——《成全》</li></ol><hr><h3 id="002"><a href="#002" class="headerlink" title="002"></a>002</h3><hr><ol><li><strong>你总想依赖别人，到最后，你会发现人生的每一个最艰难时刻，都是自己挺过来的。</strong></li><li><strong>这里是我的心，奇迹般万物生长，后来你来这儿走了一遭，这里荒芜寸草不生</strong></li><li><strong>死亡，仿佛水消失在水中。</strong></li><li><strong>自杀，也是一种变相的对自我的执着。</strong></li><li><strong>希望每个感觉在黑暗里往下沉的人，都能找到再浮起来的力量。</strong></li><li><strong>善良长不出牙齿，就是软弱。</strong></li><li><strong>我有抑郁症，所以就去死一死，没什么重要的原因，大家不必在意我的离开。</strong>——微博用户走饭</li><li><strong>你没有如期归来，而这正是离别的意义。</strong>——北岛《白日梦》</li><li><strong>生活真的好累，可我又不能去死吧，那些难捱的事情还得咬咬牙挺过去，不管过程怎么艰难，努力点总比碌碌无为要来的好吧。</strong>——出处不详</li></ol><hr><h3 id="003"><a href="#003" class="headerlink" title="003"></a>003</h3><hr><ol><li><strong>你没有如期归来，而这正是离别的意义。</strong>——北岛《白日梦》</li><li><strong>小时候真傻，居然盼着长大。</strong>—— 丰子恺</li><li><strong>你长大了，就要做好每个人都会离开的准备 。</strong>——出处不详</li><li><strong>张三丰瞧着郭襄的遗书，眼前似乎又看到了那个明慧潇洒的少女，可是，那是一百年前的事了。</strong>——金庸</li><li><strong>或许我的心包有一层硬壳，能破壳而入的东西是极其有限的。所以我才不能对人一往情深。</strong>——村上春树《挪威的森林》</li><li><strong>热闹是他们的，我什么都没有。</strong>——朱自清</li><li><strong>哪里会有人喜欢孤独，不过是不喜欢失望罢了。</strong>——村上春树《挪威的森林》</li><li><strong>现代人的崩溃，是一种很安静的崩溃，看起来特别正常。会说笑，会打闹，会社会，表面很平静，实际心情已经糟到一定程度了。但不会骂人，不会砸东西，更不会哭。就算有那么一刻，达到所能承受的极限了，也只是不说话，不会真的崩溃，就是不太想活，却也不敢去死。</strong>——出处不详</li><li><strong>我以前以为秘密不能说，现在才知道难过也不能说。</strong>——出处不详</li></ol><hr><h3 id="004"><a href="#004" class="headerlink" title="004"></a>004</h3><hr><ol><li><strong>后来我终于知道，它并不是我的花，我只是恰好途径了它的盛放。</strong>——出处不详</li><li><strong>世间所有的爱都指向团聚，唯有父母的爱指向别离。</strong>——出处不详</li><li><strong>我今年十八岁，如果身体健康，没有飞来横祸，我还可以活四十年，五十年，六十年，但我可能再也见不到她了，而我又只有这么一辈子。</strong>——出处不详</li><li><strong>生活从来不会招招手说，“小子过来我们讲讲道理”，生活只会一个大嘴巴把你打在地上后说，“傻逼，学着点。”</strong>——出处不详</li><li><strong>希望你能明白，那些离开了你的人，不管当时是出于什么原因离开，也许彷徨过犹豫过挣扎不舍过。但至少，在他决定要走的那个瞬间，他觉得没有你，他会过得更好。</strong>——出处不详</li><li><strong>生活中尽是瑕疵，大多平淡。</strong>——沃梓基</li><li><strong>天堂和地狱都太过分了，人们的行为不值得那么多。</strong></li><li><strong>前已无通路，后不见归途。敌视现实，虚构远方。东张西望，一无所长。四体不勤，五谷不分。文不能测字，武不能防身</strong>——《十万嬉皮》</li><li><strong>领导看的是结果，不看过程，这个社会也是。</strong>——Muhouer</li></ol><hr><h3 id="005"><a href="#005" class="headerlink" title="005"></a>005</h3><hr><ol><li><strong>你不愿意种花，你说，我不愿看见它一点点凋落。是的，为了避免结束，你避免了一切开始。</strong>——顾城《避免》</li><li><strong>太年轻了，还没成为想成为的样子，所以也没有时间遇上共度余生的人。</strong></li><li><strong>从没和你一起坐过飞机，总是一个人坐飞机跑来找你，再一个人坐飞机回去。</strong></li><li><strong>我一生未做坏事，为何这样？</strong>——张国荣</li><li><strong>那一刻你心里有场海啸，可你静静地，没有让任何人知道。</strong>——独木舟葛婉仪</li><li><strong>我其实刻薄，不擅温言宽慰，惰于交流，说着说着便沉默。往往疏离，孤独执着。</strong></li><li><strong>我在自己周围筑起高墙，没有哪个人能够入内，也尽量不放自己出去。</strong>——村上春树 《海边的卡夫卡》</li><li><strong>我的不幸，恰恰在于我缺乏拒绝的能力。我害怕一旦拒绝别人，便会在彼此心里留下永远无法愈合的裂痕。</strong>——太宰治《人间失格》</li><li><strong>好想抱一抱每一个因为敏感而变得小心翼翼的人，我懂得他们内心的善良，亦知晓他们的可贵。(优先考虑哪些优先考虑你的人)</strong></li></ol><hr><h3 id="006"><a href="#006" class="headerlink" title="006"></a>006</h3><hr><ol><li><strong>有的人就是会天生自我厌恶，我非常清楚自己就是那种表面看的过去，各方面普普通通，有点小特长，坐在人群里不至于太扎眼，实际上非常糟糕的人。很多时候做给别人看，有时候甚至卑劣到做给自己看。每次想要对别人说明这一点的时候，大家总是好心安慰:不是的，你很好呀。不是这样的，我一点也不好，你不明白。</strong></li><li><strong>你走了真好，不然总担心你要走。</strong></li><li><strong>对于丑人，细看是种残忍。</strong></li><li><strong>被人指出丑陋之处的滋味并不好受。坦然地剥开自己并不容易。</strong></li><li><strong>很难过的是，我所认真重视对待的其实并没有人关心，我所渴望被理解的、努力倾诉希望有人愿意懂得的，其实并没有人真正去倾听。</strong></li><li><strong>我喜爱很多事物，却唯独讨厌自己。</strong></li><li><strong>哪有什么不合适，无非就是腻了，倦了，权衡利弊之后懒得爱了，想遇见比你更好的人了。</strong></li><li><strong>以后的以后，多点自知之明，少点自作多情。</strong></li><li><strong>我最信任的人，教会我不要信任何人。</strong></li></ol><hr><h3 id="007"><a href="#007" class="headerlink" title="007"></a>007</h3><hr><ol><li><strong>有些事情做不完，就留到明天做吧！運氣好的話，明天死了就不用做了。</strong></li><li><strong>其实不想丧的，但真的不快乐。</strong></li><li><strong>生活到底对你们做了什么，不敢再尝试，不敢再用力爱，不敢再探索。你以为那是成熟，我认为那叫死了。</strong></li><li><strong>人生这么短，我要和像我喜欢你一样喜欢我的人一起过。</strong></li><li><strong>少吃兩口飯我都做不到，怎麼可能說不喜歡就不喜歡呢？</strong></li><li><strong>不是所有怪物一开始就是怪物，也不是所有怪物看起来都像怪物。有些人会把怪物的一面藏在心里。</strong>——弗雷德里克·巴克曼《外婆的道歉信》</li><li><strong>死亡最强大的力量不在于它能让人死去，而在于让留下来的人不想再活着。</strong>——弗雷德里克·巴克曼《外婆的道歉信》</li><li><strong>我什么都做不了，只能眼睁睁地看着。</strong></li><li><strong>一切都消失在迷雾之中了。过去给抹掉了，而抹掉本身又被遗忘了，谎言便变成了真话。</strong>——乔治·奥威尔《一九八四》</li></ol><hr><h3 id="008"><a href="#008" class="headerlink" title="008"></a>008</h3><hr><ol><li><strong>人在无端微笑时，不是百无聊赖，就是痛苦难当。</strong>——王小波《革命时期的爱情》</li><li><strong>人性本凉薄，又何介，谁比谁更多。</strong>——三毛</li><li><strong>心，若没有栖息的地方，到哪里都是流浪。</strong>——三毛</li><li><strong>一见钟情，明明是见色起意。日久生情，不过是权衡利弊。就连白头到老，都只是习惯使然。</strong>——安逸《这咬人的爱》</li><li><strong>在青春的掩护下，颓废是勇气，懒惰是反抗，空虚是性感。</strong>——刘渝</li><li><strong>任凭怎么解释，世人也只能相信自己愿意相信的事情。越是拼命争扎，我们的处境越是狼狈。</strong>——村上春树《挪威的森林》</li><li><strong>哪里会有人喜欢孤独，不过是不喜欢失望。</strong>——村上春树《挪威的森林》</li><li><strong>我们究竟是活了365天，还是活了一天，重复了364遍。</strong></li><li><strong>那天，我忍住没哭。</strong>——Muhouer</li></ol><hr><h3 id="009"><a href="#009" class="headerlink" title="009"></a>009</h3><hr><ol><li><strong>以前挺理想主义的，一直都认为金钱不是自由生活的前提，精神自由最重要。当我走出校园真正开始接触社会才发现，赚到的钱越多，生活的可选择性越大，也就越不容易受到周遭环境的影响。</strong></li><li><strong>希望你们可以尽己所能，想方设法给自己挣到足够的钱，好去旅游，去无所事事，去思索世界的未来或过去，去看书、做梦或是在街头闲逛，让思考的鱼线深深沉入这条溪流中去。</strong>——伍尔夫在《一间自己的房间》</li><li><strong>一切正常的生命都会有意识或无意识地对控制感到愤恨。如果这种控制来自能力低下的一方或据说能力低下的一方，这种愤恨就会更加强烈。人类的智力就像是孔雀的羽毛。只不过是种用来吸引配偶的浮夸表演。</strong></li><li><strong>最让我崩溃的不是贫穷，而是这种看不见希望的生活。</strong></li><li><strong>有些事情做不完，就留到明天做吧！運氣好的話，明天死了就不用做了！</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;可能会太丧，不建议一次性食用，千万不要贪杯哦~&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;别人都祝你快乐，我只愿你，遍历山河，觉得人间值得。&lt;/strong&gt;——夫禾《禾叔的杂货铺
      
    
    </summary>
    
      <category term="拾句" scheme="https://muhouer.github.io/categories/%E6%8B%BE%E5%8F%A5/"/>
    
    
      <category term="丧" scheme="https://muhouer.github.io/tags/%E4%B8%A7/"/>
    
  </entry>
  
  <entry>
    <title>volatile关键字</title>
    <link href="https://muhouer.github.io/posts/ce0f712d/"/>
    <id>https://muhouer.github.io/posts/ce0f712d/</id>
    <published>2019-07-15T15:38:00.000Z</published>
    <updated>2019-07-16T16:18:26.682Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文最初来源，在此基础上做了部分修改、调整。</p><footer><strong>liuxiaopeng</strong><cite><a href="http://www.cnblogs.com/paddix/" target="_blank" rel="noopener">Java 并发编程：volatile的使用及其原理</a></cite></footer></blockquote><h2 id="volatile作用"><a href="#volatile作用" class="headerlink" title="volatile作用"></a>volatile作用</h2><p>在《Java并发编程：核心理论》一文中，我们已经提到过可见性、有序性及原子性问题，通常情况下我们可以通过Synchronized关键字来解决这些个问题，不过如果对Synchronized原理有了解的话，应该知道Synchronized是一个比较重量级的操作，对系统的性能有比较大的影响，所以，如果有其他解决方案，我们通常都避免使用Synchronized来解决问题。而volatile关键字就是Java中提供的另一种解决可见性和有序性问题的方案。对于原子性，需要强调一点，也是大家容易误解的一点：对volatile变量的单次读/写操作可以保证原子性的，如long和double类型变量，但是并不能保证i++这种操作的原子性，因为本质上i++是读、写两次操作。</p><h2 id="volatile使用场景"><a href="#volatile使用场景" class="headerlink" title="volatile使用场景"></a>volatile使用场景</h2><h3 id="防止重排序"><a href="#防止重排序" class="headerlink" title="防止重排序"></a>防止重排序</h3><p>我们从一个最经典的例子来分析重排序问题。大家应该都很熟悉单例模式的实现，而在并发环境下的单例实现方式，我们通常可以采用双重检查加锁（DCL）的方式来实现。其源码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton &#123;</span><br><span class="line">    public static volatile Singleton singleton;</span><br><span class="line">    /**</span><br><span class="line">     * 构造函数私有，禁止外部实例化</span><br><span class="line">     */</span><br><span class="line">    private Singleton() &#123;&#125;;</span><br><span class="line">    public static Singleton getInstance() &#123;</span><br><span class="line">        if (singleton == null) &#123;</span><br><span class="line">            synchronized (Singleton.class) &#123;</span><br><span class="line">                if (singleton == null) &#123;</span><br><span class="line">                    singleton = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们分析一下为什么要在变量singleton之前加上<code>volatile</code>关键字。要理解这个问题，先要了解对象的构造过程，实例化一个对象其实可以分为三个步骤：</p><p>　　1. 分配内存空间。<br>　　2. 初始化对象。<br>　　3. 将内存空间的地址赋值给对应的引用。</p><p>但是由于操作系统可以对指令进行重排序，所以上面的过程也可能会变成如下过程：</p><p>　　1. 分配内存空间。<br>　　2. 将内存空间的地址赋值给对应的引用。<br>　　3. 初始化对象</p><p>　　如果是这个流程，多线程环境下就可能将一个未初始化的对象引用暴露出来，从而导致不可预料的结果。因此，为了防止这个过程的重排序，我们需要将变量设置为volatile类型的变量。</p><h3 id="实现可见性"><a href="#实现可见性" class="headerlink" title="实现可见性"></a>实现可见性</h3><p>可见性问题主要指一个线程修改了共享变量值，而另一个线程却看不到。引起可见性问题的主要原因是每个线程拥有自己的一个高速缓存区——线程工作内存。volatile关键字能有效的解决这个问题，我们看下下面的例子，就可以知道其作用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class VolatileTest &#123;</span><br><span class="line">    int a = 1;</span><br><span class="line">    int b = 2;</span><br><span class="line"></span><br><span class="line">    public void change() &#123;</span><br><span class="line">        a = 3;</span><br><span class="line">        b = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void print() &#123;</span><br><span class="line">        System.out.println(&quot;b=&quot; + b + &quot;;a=&quot; + a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            final VolatileTest test = new VolatileTest();</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                test.change();</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                test.print();</span><br><span class="line">            &#125;).start();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直观上说，这段代码的结果只可能有两种：b=3;a=3 或 b=2;a=1。不过运行上面的代码（可能时间上要长一点），你会发现除了上两种结果之外，还出现了第三种结果：<br><img src="/images/volitate_test_201907161149.png" width="300px" height="300px" align="center"></p><p>为什么会出现b=3;a=1这种结果呢？正常情况下，如果先执行change方法，再执行print方法，输出结果应该为b=3;a=3。相反，如果先执行的print方法，再执行change方法，结果应该是 b=2;a=1。那b=3;a=1的结果是怎么出来的？原因就是第一个线程将值a=3修改后，但是对第二个线程是不可见的，所以才出现这一结果。如果将a和b都改成volatile类型的变量再执行，则再也不会出现b=3;a=1的结果了。</p><h3 id="保证原子性"><a href="#保证原子性" class="headerlink" title="保证原子性"></a>保证原子性</h3><p>volatile只能保证对单次读/写的原子性。这个问题可以看下JLS中的描述：</p><blockquote><p>17.7 Non-Atomic Treatment of double and long<br>For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64-bit value from one write, and the second 32 bits from another write.</p></blockquote><blockquote><p>Writes and reads of volatile long and double values are always atomic.</p></blockquote><blockquote><p>Writes to and reads of references are always atomic, regardless of whether they are implemented as 32-bit or 64-bit values.</p></blockquote><blockquote><p>Some implementations may find it convenient to divide a single write action on a 64-bit long or double value into two write actions on adjacent 32-bit values. For efficiency’s sake, this behavior is implementation-specific; an implementation of the Java Virtual Machine is free to perform writes to long and double values atomically or in two parts.</p></blockquote><blockquote><p>Implementations of the Java Virtual Machine are encouraged to avoid splitting 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as volatile or synchronize their programs correctly to avoid possible complications.</p></blockquote><p>long和double两种数据类型的操作可分为高32位和低32位两部分，因此普通的long或double类型读/写可能不是原子的。因此，鼓励大家将共享的long和double变量设置为volatile类型，这样能保证任何情况下对long和double的单次读/写操作都具有原子性。</p><p>关于volatile变量对原子性保证，有一个问题容易被误解。现在我们就通过下列程序来演示一下这个问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class VolatileTest &#123;</span><br><span class="line">    volatile int i;</span><br><span class="line">    public void addI() &#123;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        final VolatileTest test01 = new VolatileTest();</span><br><span class="line">        for (int n = 0; n &lt; 1000; n++) &#123;</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                test01.addI();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(10000);//等待10秒，保证上面程序执行完成</span><br><span class="line">        System.out.println(test01.i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家可能会误认为对变量i加上关键字volatile后，这段程序就是线程安全的。大家可以尝试运行上面的程序。下面是我本地运行的结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">993</span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure><p>可能每个人运行的结果不相同。不过应该能看出，volatile是无法保证原子性的（否则结果应该是1000）。原因也很简单，i++其实是一个复合操作，包括三步骤：</p><p>　　1. 读取i的值。<br>　　2. 对i加1。<br>　　3. 将i的值写回内存。</p><p>volatile是无法保证这三个操作是具有原子性的，我们可以通过<code>AtomicInteger</code>或者<code>synchronized</code>来保证+1操作的原子性，以下代码为使用<code>AtomicInteger</code>对应的实现。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class VolatileTest &#123;</span><br><span class="line">    AtomicInteger i = new AtomicInteger(0);</span><br><span class="line">    public void addI() &#123;</span><br><span class="line">        i.getAndAdd(1);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class="line">        final VolatileTest test01 = new VolatileTest();</span><br><span class="line">        for (int n = 0; n &lt; 1000; n++) &#123;</span><br><span class="line">            new Thread(() -&gt; &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                test01.addI();</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Thread.sleep(10000);//等待10秒，保证上面程序执行完成</span><br><span class="line">        System.out.println(test01.i.intValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：上面几段代码中多处执行了Thread.sleep()方法，目的是为了增加并发问题的产生几率，无其他作用。</p><h2 id="volatile原理"><a href="#volatile原理" class="headerlink" title="volatile原理"></a>volatile原理</h2><p>通过上面的例子，我们基本应该知道了volatile是什么以及怎么使用。现在我们再来看看volatile的底层是怎么实现的。</p><h3 id="可见性实现"><a href="#可见性实现" class="headerlink" title="可见性实现"></a>可见性实现</h3><p>在前文中已经提及过，线程本身并不直接与主内存进行数据的交互，而是通过线程的工作内存来完成相应的操作。这也是导致线程间数据不可见的本质原因。因此要实现volatile变量的可见性，直接从这方面入手即可。对volatile变量的写操作与普通变量的主要区别有两点：</p><p>　　（1）修改volatile变量时会强制将修改后的值刷新的主内存中。</p><p>　　（2）修改volatile变量后会导致其他线程工作内存中对应的变量值失效。因此，再读取该变量值的时候就需要重新从读取主内存中的值。</p><p>　　通过这两个操作，就可以解决volatile变量的可见性问题。</p><h3 id="有序性实现"><a href="#有序性实现" class="headerlink" title="有序性实现"></a>有序性实现</h3><p>在解释这个问题前，我们先来了解一下Java中的happen-before规则，JSR 133中对Happen-before的定义如下：</p><blockquote><p>Two actions can be ordered by a happens-before relationship.If one action happens before another, then the first is visible to and ordered before the second.</p></blockquote><p>　　通俗一点说就是如果a happen-before b，则a所做的任何操作对b是可见的。（这一点大家务必记住，因为happen-before这个词容易被误解为是时间的前后）。我们再来看看JSR 133中定义了哪些happen-before规则：</p><blockquote><p>• Each action in a thread happens before every subsequent action in that thread.<br>• An unlock on a monitor happens before every subsequent lock on that monitor.<br>• A write to a volatile field happens before every subsequent read of that volatile.<br>• A call to start() on a thread happens before any actions in the started thread.<br>• All actions in a thread happen before any other thread successfully returns from a join() on that thread.<br>• If an action a happens before an action b, and b happens before an action c, then a happens before c.</p></blockquote><p>　　翻译过来为：</p><ul><li>同一个线程中的，前面的操作 happen-before 后续的操作。（即单线程内按代码顺序执行。但是，在不影响在单线程环境执行结果的前提下，编译器和处理器可以进行重排序，这是合法的。换句话说，这一是规则无法保证编译重排和指令重排）。</li><li>监视器上的解锁操作 happen-before 其后续的加锁操作。（Synchronized 规则）</li><li>对volatile变量的写操作 happen-before 后续的读操作。（volatile 规则）</li><li>线程的start() 方法 happen-before 该线程所有的后续操作。（线程启动规则）</li><li>线程所有的操作 happen-before 其他线程在该线程上调用 join 返回成功后的操作。</li><li>如果 a happen-before b，b happen-before c，则a happen-before c（传递性）。</li></ul><p>　　这里我们主要看下第三条：volatile变量的保证有序性的规则。<a href="http://www.cnblogs.com/paddix/p/5374810.html" target="_blank" rel="noopener">《Java并发编程：核心理论》</a>一文中提到过重排序分为编译器重排序和处理器重排序。为了实现volatile内存语义，JMM会对volatile变量限制这两种类型的重排序。下面是JMM针对volatile变量所规定的重排序规则表：</p><table><thead><tr><th><strong>Can Reorder</strong></th><th><em>2nd operation</em></th><th></th><th></th></tr></thead><tbody><tr><td><em>1st operation</em></td><td>Normal Load Normal Store</td><td>Volatile Load</td><td>Volatile Store</td></tr><tr><td>Normal Load Normal Store</td><td></td><td></td><td>No</td></tr><tr><td>Volatile Load</td><td>No</td><td>No</td><td>No</td></tr><tr><td>Volatile store</td><td></td><td>No</td><td>No</td></tr></tbody></table><h3 id="内存屏障"><a href="#内存屏障" class="headerlink" title="内存屏障"></a>内存屏障</h3><p>为了实现volatile可见性和happen-befor的语义。JVM底层是通过一个叫做“内存屏障”的东西来完成。内存屏障，也叫做内存栅栏，是一组处理器指令，用于实现对内存操作的顺序限制。下面是完成上述规则所要求的内存屏障：</p><table><thead><tr><th><strong>Required barriers</strong></th><th><em>2nd operation</em></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><em>1st operation</em></td><td>Normal Load</td><td>Normal Store</td><td>Volatile Load</td><td>Volatile Store</td></tr><tr><td>Normal Load</td><td></td><td></td><td></td><td>LoadStore</td></tr><tr><td>Normal Store</td><td></td><td></td><td></td><td>StoreStore</td></tr><tr><td>Volatile Load</td><td>LoadLoad</td><td>LoadStore</td><td>LoadLoad</td><td>LoadStore</td></tr><tr><td>Volatile Store</td><td></td><td></td><td>StoreLoad</td><td>StoreStore</td></tr></tbody></table><p>（1）LoadLoad 屏障<br>执行顺序：Load1—&gt;Loadload—&gt;Load2<br>确保Load2及后续Load指令加载数据之前能访问到Load1加载的数据。</p><p>（2）StoreStore 屏障<br>执行顺序：Store1—&gt;StoreStore—&gt;Store2<br>确保Store2以及后续Store指令执行前，Store1操作的数据对其它处理器可见。</p><p>（3）LoadStore 屏障<br>执行顺序： Load1—&gt;LoadStore—&gt;Store2<br>确保Store2和后续Store指令执行前，可以访问到Load1加载的数据。</p><p>（4）StoreLoad 屏障<br>执行顺序: Store1—&gt; StoreLoad—&gt;Load2<br>确保Load2和后续的Load指令读取之前，Store1的数据对其他处理器是可见的。</p><p>最后我可以通过一个实例来说明一下JVM中是如何插入内存屏障的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class MemoryBarrier &#123;</span><br><span class="line">    int a, b;</span><br><span class="line">    volatile int v, u;</span><br><span class="line">    void f() &#123;</span><br><span class="line">        int i, j;</span><br><span class="line">        i = a;</span><br><span class="line">        j = b;</span><br><span class="line">        i = v;</span><br><span class="line">        //LoadLoad</span><br><span class="line">        j = u;</span><br><span class="line">        //LoadStore</span><br><span class="line">        a = i;</span><br><span class="line">        b = j;</span><br><span class="line">        //StoreStore</span><br><span class="line">        v = i;</span><br><span class="line">        //StoreStore</span><br><span class="line">        u = j;</span><br><span class="line">        //StoreLoad</span><br><span class="line">        i = u;</span><br><span class="line">        //LoadLoad</span><br><span class="line">        //LoadStore</span><br><span class="line">        j = b;</span><br><span class="line">        a = i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体上来说volatile的理解还是比较困难的，如果不是特别理解，也不用急，完全理解需要一个过程，在后续的文章中也还会多次看到volatile的使用场景。这里暂且对volatile的基础知识和原来有一个基本的了解。总体来说，volatile是并发编程中的一种优化，在某些场景下可以代替Synchronized。但是，volatile的不能完全取代Synchronized的位置，只有在一些特殊的场景下，才能适用volatile。总的来说，必须同时满足下面两个条件才能保证在并发环境的线程安全：</p><p>　1. 对变量的写操作不依赖于当前值。</p><p>　2. 该变量没有包含在具有其他变量的不变式中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;本文最初来源，在此基础上做了部分修改、调整。&lt;/p&gt;&lt;footer&gt;&lt;strong&gt;liuxiaopeng&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://www.cnblogs.com/paddix/&quot; target=&quot;_blank&quot; 
      
    
    </summary>
    
      <category term="Java关键字" scheme="https://muhouer.github.io/categories/Java%E5%85%B3%E9%94%AE%E5%AD%97/"/>
    
    
      <category term="volatile" scheme="https://muhouer.github.io/tags/volatile/"/>
    
  </entry>
  
  <entry>
    <title>拾句-爱</title>
    <link href="https://muhouer.github.io/posts/497a5083/"/>
    <id>https://muhouer.github.io/posts/497a5083/</id>
    <published>2019-07-15T14:54:00.000Z</published>
    <updated>2019-07-25T18:00:45.893Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>星河滚烫，你是人间理想。</strong></li><li><strong>水中月是天上月，眼前人是心上人。</strong></li><li><strong>你自月中来，星飒云中雾。</strong></li><li><strong>情不知所起，一往而深。</strong>——汤显祖《牡丹亭》</li><li><strong>不多不多，以后还可以少吃一点。</strong>——三毛</li><li><strong>为你，千千万万遍。</strong>——卡勒德·胡赛尼</li><li><strong>月亮很亮，亮也没用，没用也亮。我喜欢你，喜欢也没用，没用也喜欢。</strong> ——李诞</li><li><strong>她可以褪色，可以枯萎，怎样都可以，但我只要看她一眼，万般柔情，涌上心头。</strong>——《洛丽塔》</li><li><strong>别惊动我爱的人，等他自己情愿。</strong>——《圣经》</li></ol><hr><ol><li><strong>斯人如彩虹，遇上方知有。</strong></li><li><strong>世上本无圣诞老人，所有礼物和惊喜都来自爱你的人。</strong></li><li><strong>我这个人啊，满身阴暗，还总想着给你一点阳光。</strong></li><li><strong>我想变得有趣，变得特别，变成你眼里的一点星光。</strong></li><li><strong>世界没有你想象的那么坏，你过来，来我身边，我抱你。</strong></li><li><strong>昨天很喜欢你，今天也很喜欢你，而且预感，明天也会很喜欢你。</strong></li><li><strong>这里荒芜寸草不生，后来你来这儿走了一遭，奇迹般万物生长，这里是我的心。</strong></li><li><strong>这个世界上有六十几亿人口，但某个瞬间，只这一个人，就能敌过千军万马，四海潮生。</strong></li><li><strong>喜欢啊，是清风，是朝露，是脸颊红红，是千千万万人里，心里除了你再也装不下其它。</strong></li></ol><hr><ol><li><strong>不奢望永远，所以，爱一天，珍惜一天。</strong></li><li><strong>深情但不纠缠。</strong></li><li><strong>人一大，碰到真心喜欢的人，第一感觉是害怕，还有自卑。</strong></li><li><strong>真心说出的不一定是真话，那是情话。</strong></li><li><strong>月遇从云，花遇和风，今晚上的夜空很美，我又想你。</strong> ——太宰治</li><li><strong>就算世界荒芜，总有一个人，他会是你的信徒。</strong> ——独木舟《深海里的星星》</li><li><strong>朝暮与年岁并往，然后与你一同行至天光。</strong> ——河唐先生《天光》</li><li><strong>草在结它的种子，风在摇它的叶子，我们站着，不说话，就十分美好。</strong>——顾城《门前》</li><li><strong>余生不用多指教，我都听你的就是了。</strong></li></ol><hr><ol><li><strong>因为你，我愿意成为一个更好的人。</strong></li><li><strong>纵然，从此一别两宽，各自欢喜，你也曾写进了他的生命里，虽非经久不衰，却最浓墨重彩。</strong></li><li><strong>藏不住的喜欢，理直气壮就好了。</strong></li><li><strong>我喜欢你，甚于昨日，略匮明朝。</strong></li><li><strong>特别喜欢你朝我走过来的样子，不过我很紧张，心砰砰地跳。</strong></li><li><strong>你要做个可爱的姑娘，不烦世事，满心欢喜。</strong></li><li><strong>我站在哪都可以，可以站在你前面，保护你；也可以站在你后面，撑起你；也可以站在你旁边，与你并肩(也可以站得远远的，远离你)。</strong></li><li><strong>世界并不会对你温柔以待，上帝也不会对你特殊照顾，但是，我会呀。</strong></li><li><strong>一生太短，所以遇到喜欢的人，就要认真喜欢。</strong></li></ol><hr><ol><li><strong>外面风大，我带你回家。</strong></li><li><strong>想陪你一起无所事事。</strong></li><li><strong>我这个人超级好的，你可以放心喜欢。</strong></li><li><strong>你回头。</strong></li><li><strong>还有我呢！</strong></li><li><strong>你最可爱！</strong></li><li><strong>今晚月色真美！</strong></li><li><strong>上来吧，我背你！</strong></li><li><strong>哈哈哈，你也是个普通人，和我一样。</strong></li></ol><hr><ol><li><strong>我寻了半生的春天，你一笑便是了。</strong></li><li><strong>我一点也不想你，一点半再想。</strong></li><li><strong>我想和你在一起，几天也好。在某个地方，某个时辰。</strong> ——杜拉斯</li><li><strong>陌上开花，可缓缓归矣。</strong></li><li><strong>玲珑骰子安红豆，入骨相思君知否。</strong></li><li><strong>此情无计可消除，才下眉头，却上心头。</strong></li><li><strong>春风十里不如你。</strong></li><li><strong>愿得一心人，白首莫相离。</strong></li><li><strong>情不知所起，一往而深。</strong></li></ol><hr><ol><li><strong>但愿人长久，千里共婵娟。</strong></li><li><strong>人生若只如初见。</strong></li><li><strong>今夕何夕，见此良人。</strong></li><li><strong>只一眼，便千秋万世。</strong></li><li><strong>何烦五色药，尊下即丹丘。</strong></li><li><strong>愿你垂垂老矣，我可明我心。</strong></li><li><strong>所爱隔山海，山海皆可平。</strong></li><li><strong>身无彩凤双飞翼，心有灵犀一点通。</strong></li><li><strong>世间安得双全法，不负如来不负卿</strong></li></ol><hr><ol><li><strong>说的是一辈子！差一年，一个月，一天，一个时辰，都不算一辈子！</strong>——《霸王别姬》</li><li><strong>如果再也看不到你，祝你早安，午安，晚安。</strong>——《楚门的世界》</li><li><strong>如果她打你，一定要装得很痛；如果真的很痛，要装得没事。</strong>——《我的野蛮女友》</li><li><strong>到你是我人生的一大收获。我不道别，也不跟你约定，我想我们一定能再见面的。</strong>——《东京爱情故事》</li><li><strong>我这一生都是坚定不移的唯物主义者，唯有你，我希望有来生。</strong>–《周恩来家书》</li><li><strong>醒来觉得甚是爱你。</strong>——朱生豪《朱生豪情书》</li><li><strong>我并没有喜欢哪一种类型的人 。如果我喜欢你，我喜欢的就只是你。</strong>——蔡康永</li><li><strong>答案很长，我准备用一生的时间来回答，你准备要听了吗？</strong>——林徽因</li><li><strong>人间烟火，山河远阔。无一是你，无一不是你。</strong></li></ol><hr><ol><li><strong>若逢新雪初霁/满月当空/下面平铺着皓影/上面流转着亮银/而你带笑地向我步来/月色与雪色之间/你是第三种绝色</strong>——余光中 《绝色》</li><li><strong>这黑灯瞎火的，我贼他妈想你。</strong></li><li><strong>我爱你，不光是因为你的样子；还因为和你在一起时，我的样子。</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;&lt;li&gt;&lt;strong&gt;星河滚烫，你是人间理想。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;水中月是天上月，眼前人是心上人。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;你自月中来，星飒云中雾。&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;情不知所起，
      
    
    </summary>
    
      <category term="拾句" scheme="https://muhouer.github.io/categories/%E6%8B%BE%E5%8F%A5/"/>
    
    
      <category term="爱" scheme="https://muhouer.github.io/tags/%E7%88%B1/"/>
    
  </entry>
  
  <entry>
    <title>拾句-惊艳</title>
    <link href="https://muhouer.github.io/posts/922764cc/"/>
    <id>https://muhouer.github.io/posts/922764cc/</id>
    <published>2019-07-15T14:41:00.000Z</published>
    <updated>2019-07-25T18:08:28.883Z</updated>
    
    <content type="html"><![CDATA[<ol><li><strong>说书唱戏劝人方，三条大路走中央。善恶到头终有报，人间正道是沧桑。</strong>—— 单口相声定场诗</li><li><strong>曾以为走不出的日子，现在都回不去了。</strong>——村上春树</li><li><strong>长大了，总有那么一两次，你会为重视的人奔跑，因为是对的人，走路真的来不及。</strong></li><li><strong>没事，只不过是恢复原状罢了，我本来就是一无所有的。</strong>——濑川初原《食灵零》</li><li><strong>能够说出的委屈，便不算委屈；能够抢走的爱人，便不算爱人。</strong>——亦舒《开到荼蘼》</li><li><strong>有人一看书就卖弄，多看几本吧，多看几本就不卖弄了。</strong>——木心</li><li><strong>你如果认识从前的我，也许你会原谅现在的我。</strong>——张爱玲《倾城之恋》</li><li><strong>希望你明白，我凡事都看得开，但并不影响我记仇。</strong></li><li><strong>我们奋力前行，逆水行舟，被不断向后推，直至回到往昔岁月。</strong>——《了不起的盖茨比》</li></ol><hr><ol><li><strong>人生天地之间，若白驹之过隙，忽然而已。</strong>——庄周</li><li><strong>逝者如斯夫，不舍昼夜。</strong>——《论语·子罕》</li><li><strong>贫穷的思维，是造成贫穷的真正原因。</strong></li><li><strong>每一个不曾起舞的日子，都是对生命的辜负。</strong>——尼采</li><li><strong>敬这大争之世，敬这小酌之时。</strong></li><li><strong>长大是人必经的溃烂。</strong>——塞林格</li><li><strong>远方除了遥远一无所有。</strong>——海子</li><li><strong>我妈曾经说过一句话：即使你躺倒让别人踩在你身上走，别人还是会抱怨你踩着不够舒服。所以，不用试着让所有人都开心，过好你自己的生活。</strong></li><li><strong>张华考上了北京大学，李萍进了中等技术学校，我在百货公司当售货员，我们都有光明的前途。</strong>——新华字典1998修订本”前途“一词的例句</li></ol><hr><ol><li><strong>少年的肩膀，就该这样才对嘛，什么家国仇恨，浩然正气的，都不要急，先挑起清风明月、杨柳依依和草长莺飞，少年郎的肩头，本就应当满是美好的事物啊。</strong>——烽火戏诸侯《剑来》</li><li><strong>女孩，晚安，你要早睡，才会有一天找到另一个也喜欢早睡的男孩，拥抱着你入睡，在你耳边呢喃一句晚安。只有孤独的灵魂，才会越晚越清醒。女孩，你听到吗，晚安。</strong>——阿句句《全世界失眠》</li><li><strong>想生个女儿，头发顺长，肉薄心窄，眼神忧郁。用牛奶，豆浆，米汤和可口可乐浇灌，一二十年后长成祸水。</strong>——冯唐《北京北京》</li><li><strong>有朝一日会成为被喜欢的人觉得大吃一惊，被讨厌的人刮目相看的人</strong>——网易云热评</li><li><strong>你对纹身的女人怎么看？你对她有偏见？</strong></li><li><strong>我喜欢的女性是多元的，拒绝“女人就应该活成女人的样子”“年纪这么大了，还这么有少女感”“女人过了多少岁就没价值了，类似这样的话。我认真对待我自己，认真对待年龄留下的饱满痕迹，我所有的经历构造了现在的我，我无需被其他定义，无需被教导成“女孩应该有的样子”我只是我而已。</strong></li><li><strong>也没有什么热衷的东西，感觉追不上就悄悄走开了。</strong></li><li><strong>生活没那么复杂，种豆子和相思或许都得瓜。你敢试，世界就敢答 。</strong></li><li><strong>有时候你问的问题对方一直在闪躲，那就是在委婉地告诉你，真实的回答很残忍。</strong></li></ol><hr><ol><li><strong>你必须只有内心丰富，才能摆脱这些生活表面的相似。</strong></li><li><strong>贪安稳就没有自由，要自由就要历些危险。只有这两条路。</strong>鲁迅</li><li><strong>不能听命于自己者，就要受命于他人。</strong>——尼采《查特拉斯如是说》</li><li><strong>若是看到自己周围一群拙劣的追随者以及同伴，首要的正确反省是：自己做得还不够卓越。</strong></li><li><strong>幸运的人一生都被童年治愈，不幸的人一生都在治愈童年。</strong></li><li><strong>她那时候还太年轻，不知道所有命运馈赠的礼物，早已经在暗中标好了价格。</strong>——《断头王后》</li><li><strong>单是聪明还不够，还应有足够的聪明以避免过度聪明。</strong>——莫洛瓦</li><li><strong>我们始终有一种错觉，以为我们的感情源自于我们自己的内心。</strong>——古斯塔夫·勒庞 《乌合之众》</li><li><strong>人一到群体中，智商就严重降低，为了获得认同，个体愿意抛弃是非，用智商去换取那份让人倍感安全的归属感。</strong>——古斯塔夫·勒庞 《乌合之众》</li></ol><hr><ol><li><strong>没有人帮你，说明你一个人可以。</strong></li><li><strong>我要再和生活死磕几年。要么我就毁灭，要么我就注定铸就辉煌。如果有一天，你发现我在平庸面前低了头，请向我开炮。</strong>——杰克·凯鲁亚克《在路上》</li><li><strong>正因为众人畏惧死亡，死亡这个事件里，意外率先完成的人，往往被迫伟大。</strong></li><li><strong>与其互为人间，不如自成宇宙。</strong></li><li><strong>希望每个感觉在黑暗里往下沉的人，都能找到再浮起来的力量。</strong></li><li><strong>因为拥有过的很少，所以根本学不会断舍离，生活里一切鸡毛蒜皮的温馨 我都想藏起来。</strong></li><li><strong>人生的意义是什么？是在生命里偶尔感到超出人的一些部分。</strong></li><li><strong>一无所有来，一无所有走。中间的过程里，说“失去”都是太抬举自己，借来的、还回去，摊开手心，紧握拳心，会心一击。</strong>——春夏</li><li><strong>决定我们是什么人的是：在本可以什么都不做的时候，你在做什么？</strong></li></ol><hr><ol><li><strong>几时归去，作个闲人。对一张琴，一壶酒，一溪云。</strong> ——苏轼 行香子·述怀</li><li><strong>人易老，事多妨，梦难长。一点深情，三分浅土，半壁斜阳。</strong> ——汤显祖</li><li><strong>情不知所起，一往而深，生者可以死，死者可以生。生而不可与死，死而不可复生者，皆非情之至也。</strong> ——汤显祖</li><li><strong>被酒莫惊春睡重，赌书消得泼茶香。当时只道是寻常。</strong> ——纳兰性德《浣溪沙》</li><li><strong>十步杀一人，千里不留行。事了拂衣去，深藏身与名。</strong> ——李白《侠客行》</li><li><strong>从前幽怨应无数。铁马金戈，青冢黄昏路。一往情深深几许？深山夕照深秋雨。</strong> ——纳兰性德《蝶恋花·出塞》</li><li><strong>一生一代一双人，争教两处销魂。相思相望不相亲，天为谁春?</strong> ——纳兰性德《画堂春·一生一代一双人》</li><li><strong>人生若只如初见，何事秋风悲画扇？等闲变却故人心，却道故人心易变。</strong> ——纳兰性德</li><li><strong>出了这个门，有人遭遇风雪，有人逢着彩虹；有人看见虎狼，有人逢着羔羊；有人在春天里发抖，有人在冬天里歌唱。浮沉烟云，总归幻象。悲苦是蜜，全凭心酿。</strong> ——迟子建</li></ol><hr><ol><li><strong>“如果顺利的话，我会买一个公寓，养一只柯基，一只英短，孤身一人，自由且满足地度过余生。” “若是不顺呢？” “结婚生子”。</strong></li><li><strong>多数的日子平淡无奇，灵光的颜色往往不暖。</strong></li><li><strong>丑比美更容易散播，因为丑不需要灵魂。</strong></li><li><strong>为了有趣而有趣，不有趣；辛于平凡的平凡，不平凡。心中萧瑟，世界就成灰色，心怀旷野，哪里都是山河。</strong></li><li><strong>做你自己，然后去承受你为个性而付出的代价。</strong></li><li><strong>所有人都在和所有人喝茶吃饭，往往来来，没有尽头。</strong></li><li><strong>不被爱着并不是你的错 你需要看到这些创伤 然后，试着做你自己。</strong></li><li><strong>爱自己是终身浪漫的开始。</strong></li><li><strong>自信的状态是，别人怎么贬低自己都觉得放你妈的狗屁。</strong></li></ol><hr><ol><li><strong>人人情有可缘，谁也不正确。</strong></li><li><strong>一个人，欺负最多的，往往是身边的亲人，因为开罪别人可能会让自己失去很多，而得罪这些人，可以没有一点成本。</strong></li><li><strong>小事要忍，大事要狠，没人扶的时候自己要站稳。路是走出来的，越低谷的时候越要撑起自己，要赢得起也要输得起。一直在学走路，总有一天会站起来。</strong></li><li><strong>外面的雷雨愈发振作，屋内的桌椅茶杯更是安宁。</strong></li><li><strong>要是在暮春时节，看满山暴雨打落花，一定很热闹。</strong></li><li><strong>绿蚁新醅酒，红泥小火炉，晚来天欲雪，能饮一杯无？</strong>——白居易《问刘十九》</li><li><strong>人终究会被其年少不可得之物困扰一生。</strong></li><li><strong>你要克服懒惰，你要克服游手好闲，你要克服漫长的白日梦，你要克服一蹴而就的妄想，你要克服自以为是浅薄的幽默感。你要独立生长在这世上，不寻找不依靠，因为冷漠寡情的人孤独一生。你要坚强，振作，自立，不能软弱，逃避，害怕。不要沉溺在消极负面得情绪里，要正面阳光得对待生活和爱你的人。</strong></li><li><strong>永远年轻，永远热泪盈眶。</strong></li></ol><hr><ol><li><strong>你才25岁，你可以成为任何你想成为的人。</strong>——《步履不停》</li><li><strong>你可以拥有一切，但不能同时。</strong>——玛丽莲·梦露</li><li><strong>每天发生在自己身上99％的事情，于别人而言根本毫无意义。</strong>——马克-鲍尔莱恩</li><li><strong>我用尽了全力，过着平凡的一生 。</strong>——《月亮与六便士》</li><li><strong>人的一切痛苦，本质上都是对自己无能的愤怒。</strong>——王小波</li><li><strong>铁甲依然在。</strong></li><li><strong>为了逃离孤单，所刻意做的一切，反而会让人更加孤独。孤单是连续的，不孤单是间断的。</strong></li><li><strong>孤独这两个字拆开来看，有孩童，有瓜果，有小犬，有蝴蝶，足以撑起一个盛夏傍晚间的巷子口，人情味十足。稚儿擎瓜柳棚下，细犬逐蝶窄巷中，人间繁华多笑语，惟我空余两鬓风。——孩童水果猫狗飞蝶当然热闹，可都和你无关，这就叫孤独。</strong>——林语堂</li></ol><hr><ol><li><strong>春困秋乏夏打盹，睡不醒的冬三月。</strong></li><li><strong>春生，夏糜，秋去，冬烬，春又来。</strong></li><li><strong>夔怜弦，弦怜蛇，蛇怜风，风怜目，目怜心。</strong></li><li><strong>恐惧有巨大的力量，甚至大过热情。</strong></li><li><strong>蹑着猫足而至。</strong></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;&lt;li&gt;&lt;strong&gt;说书唱戏劝人方，三条大路走中央。善恶到头终有报，人间正道是沧桑。&lt;/strong&gt;—— 单口相声定场诗&lt;/li&gt;&lt;li&gt;&lt;strong&gt;曾以为走不出的日子，现在都回不去了。&lt;/strong&gt;——村上春树&lt;/li&gt;&lt;li&gt;&lt;strong&gt;长大了，总有
      
    
    </summary>
    
      <category term="拾句" scheme="https://muhouer.github.io/categories/%E6%8B%BE%E5%8F%A5/"/>
    
    
      <category term="惊艳" scheme="https://muhouer.github.io/tags/%E6%83%8A%E8%89%B3/"/>
    
  </entry>
  
  <entry>
    <title>杂记之孕事</title>
    <link href="https://muhouer.github.io/posts/a28039a0/"/>
    <id>https://muhouer.github.io/posts/a28039a0/</id>
    <published>2019-07-14T07:59:00.000Z</published>
    <updated>2019-07-14T13:32:36.726Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录这个的缘由，也不是为了做什么，而是我自己发觉我的很多观念已经发生了变化，特别是关于婚姻、家庭……目前还处于比较混乱的状态，做此篇记录是为以后做准备，以后梳理起来会方便很多。正如谚语所说，<strong><code>罗马不是一天建成的(Rome was not built in a day)</code></strong>，观念也不是一下子就定型的，是一个不断变化的动态过程，甚至是一个打破重建的过程。我不敢保证我的观念一定正确，但是我会一直保持开放的态度。如果有可能，我很愿意沟通，甚至做出改变。最差的情况：即便我不愿接受，我也会给予足够的尊重。此篇作为杂记记录系列的第一篇，希望能一直做下去。</p></blockquote><p><strong><a href="https://www.zhihu.com/question/326634942" target="_blank" rel="noopener">现在的部分女生为什么不想生孩子？</a> 开始</strong></p><h2 id="2019-06-07"><a href="#2019-06-07" class="headerlink" title="2019-06-07"></a>2019-06-07</h2><p>👤 知乎匿名用户 | 对女孩子忠告(34k👍)</p><blockquote><p>只是想对那些被外人催生的女孩子说：<br>没有任何事情比你自己更重要<br>如果你觉得生孩子会让你很有压力，那就不要去受这场折磨！<br>他们上下嘴皮子碰了碰，都磨不掉痒劲，你要为了这群看客去怀胎十月，受累二十年？<br>遵从自己的感受，你有什么可怕的？<br>怕流言蜚语？怕被戳脊梁骨？你生了，他们就没有谈资了？？<br>论人是非者，定是是非人！<br>求求你们，勇敢一点！<br>和爱你并且懂得尊重你的人，一起幸福地活下去！<br>如果孩子对你的生活是锦上添花，我为你即将成为一位伟大的母亲而祝福及致敬！<br>但如果不是，那就量力而为，不要生了痛苦/后悔！</p><footer><strong>知乎匿名用户</strong><cite><a href="https://www.zhihu.com/question/326634942/answer/707458511" target="_blank" rel="noopener">现在的部分女生为什么不想生孩子？</a></cite></footer></blockquote><h2 id="2019-06-15"><a href="#2019-06-15" class="headerlink" title="2019-06-15"></a>2019-06-15</h2><p>👤 知乎北斗师兄 | 职业教育，有趣的小老师 | 对要孩子持保留态度(12k👍)</p><blockquote><p>说实话，作为一个男的，我也不想要孩子。因为我太怕自己有了孩子以后会变得跟我爸妈一样，把自己的整个人生全部寄托和希望都放在孩子身上。</p><p>我爸妈的生活里只有我和我姐，他们的开心，面子，和动力全在我姐和我身上。有了我们俩之后的人生就完全失去了自我的概念，而完全都是为了我们而活。以至于现在他们年纪大了，把所有的期待都压在我身上，他们不觉得生活是自己的，他们认为自己老年最美好的生活是:儿女工作稳定，成了家，生了子，他们能够发挥余热帮忙带孙子。</p><p>我绝不否认有了孩子依然能精彩的过一生，我也非常尊重很多人认为有了孩子人生才算完整这样的价值观，但我也深知受原生家庭的影响，我的性格和骨子里刻上了太多古板的东西和父母的影子。</p><p>如果我有了孩子，会带着他们的影子一不小心就失去自我。我也就活这一次，懵懂少年生活里只有父母，成年之后尚未看够这世界的花样，我不想就草草的把自己的人生交给孩子。</p><p>我也完全不认为自己的精神需要靠一个孩子作为寄托，老了需要依赖一个孩子来养。我希望我能按照自己的意愿体会更多的选择和可能。</p><footer><strong>知乎北斗师兄</strong><cite><a href="https://www.zhihu.com/question/326634942/answer/706417693" target="_blank" rel="noopener">www.zhihu.com/question/326634942/answer/706417693</a></cite></footer></blockquote><h2 id="2019-06-23"><a href="#2019-06-23" class="headerlink" title="2019-06-23"></a>2019-06-23</h2><p>👤 知乎海螺面包 | 临床医疗，重症医疗学科 | 现场百态(6.2k👍)</p><blockquote><p>1.产妇a在床上疼的死去活来，大喊着要剖宫产，我征求了其他家属的意见，婆婆拉着儿子说 剖什么剖啊，剖宫产的小孩哪有顺产的聪明？我内心os：就您那不聪明的基因蛋孵出来也不能聪明了好么…</p><p>2.产妇b生产后痔疮脱出肛门，主任直接一指禅捅了回去，还让产妇的老公戴着手套接手继续捅2个小时保证回纳成功。</p><p>3.产妇c刚下手术，一个类婆婆样的中年女性飞奔到床边大喊，有奶了吗！？？？啊？？怎么还没有奶？！！！那我孙子怎么办啊？？？！</p><p>4.G4P3（怀了4次生了3个）产妇d的老公和她自己都是智力障碍患者，她产后大出血、心力衰竭，住了一天icu老公就不肯积极治疗了。现在9岁的大宝在照顾新生儿和另一个在襁褓里的弟弟。</p><p>5.剖宫产术后杜冷丁成瘾的产妇e以后该怎么办呢。</p><p>6.剖宫产前医生是要把男方家属拉来谈话，反复告诉他们子宫只是一个器官，而我们只会优先抢救产妇，希望你们在签字的时候不要犹豫耽误时间。</p><p>抖音上常看到在产房外捧着花焦急等待的老公，可我看到的全是事不关己在产床旁打王者农药的男人。也许有好的，但是极少吧。</p><p>有些人玩游戏也就罢了，老婆疼的死去活来的还在说风凉话。“你都当妈了还怕疼？”“谁生孩子不这样，怎么就你娇气？”“那剖宫产多贵啊！”</p><p>每个人怀了孕躺在那张产床上就不再是一个能把自尊放在首位的人了吧，压力性尿失禁，耻骨分离，再也无法恢复的身材和满肚皮的妊娠纹，真的每个人都能有如此的奉献精神么？20～30岁是生育黄金期，但是人为了什么而孕育新的生命这个问题，年轻人真的能想明白吗?</p><footer><strong>知乎海螺面包</strong><cite><a href="https://www.zhihu.com/question/326634942/answer/718735681" target="_blank" rel="noopener">现在的部分女生为什么不想生孩子？</a></cite></footer></blockquote><h2 id="2019-07-10"><a href="#2019-07-10" class="headerlink" title="2019-07-10"></a>2019-07-10</h2><p>👤 知乎榛禾木 | 零售 | 丁克亲答(30k👍)</p><blockquote><p>1、我们不喜欢小孩，讨厌小孩，嫌小孩麻烦。对待小孩没有耐心，听见婴儿啼哭和小孩尖叫也会很烦躁。出去吃饭遇到奇葩的熊家庭，老婆也会发发朋友圈抱怨，借此也让催生的人看看我们的态度。我们承认的确有教育得出色的孩童，不过就像遇见别人家漂亮的小狗一样，我也许愿意摸，愿意玩，但自己不愿意养。对孩子也是如此。</p><p>2、不接受目前流行的生育观。生孩子已经变成了“别人家生了，我们家也应该有”，或者“时间到了，应该要生了”的事。如果不生，最多说不生孩子的女人是不完整的女人，左耳进右耳出。在我们当地，如果生了一个，大概率还会被催生二胎。生了以后两边父母很难做到完全不插手，各种神秘不可言说状掏出来“为你好”的民间偏方，油腻的不放盐的汤水，奇葩的月子禁忌和月子餐，育儿观冲突下增加的矛盾。老婆有大量的适龄同学朋友，这样的例子多得已经看到麻木，女性生孩子十个月脱一层皮，养孩子十个月又是脱一层皮，男人能有什么损失，该上班还是上班，最多晚上被起夜喂奶的老婆带醒了。</p><p>3、不愿意牺牲家人的生活质量。我俩的收入尚可，每年纯消费20万以上在这个包邮区的二线城市已经让自己过得很舒服，自住市区的联排，两边父母还有市郊景区的独栋别墅和市区的公寓，均无贷款，目前的生活水平我们都已满足。父母已经退休，我俩也无非几十年好光景，只想珍惜身边人，照顾父母度过舒适的晚年，不啃老，不让他们带孩子，也不至于生病时自责影响后辈的生活，所有的财产都能用在自己身上，无论养老还是救命。我们也是善良的人，如果有孩子，也会呵护他成长，在他18岁前尽到家长的责任，18岁后提供适当的辅助。但既然选择丁克，自然也没法在一个根本不存在的，虚无的“孩子”上产生感情，为他奉献。就算这是自私吧，我牺牲了一个薛定谔的孩子，只想和在世的家人走完一生。</p><p>4、害怕生育风险。老婆是个胆小的人，怕疼，怕死，怕变丑，怕很多。她不想生，正好我也不想要，就这么简单，我可做不出逼迫老婆传宗接代的事。不生孩子的老婆还保持少女模样，脸上满满的胶原蛋白。出去吃个烧烤，穿连衣裙扎着双马尾手平放在桌上，扑察扑察眨着大眼睛等吃的，店主说：“老板带女儿出来吃烧烤啊？”把我老婆乐了一天。生育前后未知的变数，我们不想承担。看到朋友带小孩看病，这个发烧那个感冒的，陪床的过程都觉得心累。我自认从小已经是不让家长操心的孩子了，但也是生过病的人。当我肝囊肿住院开刀时，我爸面对手术风险同意书拿着笔呆滞了5分钟，他后来说很怕养了20年的孩子就这么没了，还哭了。我们不想面对无力掌握的伤心事，情愿从源头上断了这个可能。</p><p>5、不想变成自己讨厌的那种人。老婆说以前某些挺正常的同学，还跟她玩得挺好的，一生完孩子，智商都好像生掉了。有在朋友圈里每天打卡乳头堵不堵的；有辞了教职闲在家里带孩子做“直销”，直播给亲儿子吃她代理的“产品”证明安全有效的；有隔了几百公里咸吃萝卜淡操心教育我们不该养猫，应该生孩子的。老婆亲戚家的女孩，饭桌上用手抓菜，敲碗碟，尖叫，一桌子大人不制止还要笑眯眯地哄，养而不教，养来何用。这是做人太假还是做人太傻。以我俩养猫时百般溺爱，把猫宠上天的情形来看，我们也是失败的父母，也有几率变成那样的人，还是不趟这水了。</p><p>6、见过太多孩子让人寒心的事，更坚定养老靠自己的信念。仅仅我俩的家族里，就出了好几个例子。有搞直销，让患尿毒症的亲妈每月花6000元问她买产品喝来治病的表姐，我姨妈去世前身上只有2000元了。有参与诈骗，全家还几百万债的远房弟弟，连75岁的老奶奶都要接活计给孙子还债。有考上公务员，傍上小老板家女儿，逼爸妈掏空全部积蓄买房，然后不理睬他们的另一个弟弟。有酒后骑电动车撞了脑袋后瘫痪的堂哥。也有理所应当地女儿一出生就养在爸妈房里，现在大了就占了房子，和妻女住，让爸妈在附近租房的上海弟弟。老婆的外婆要住进养老院，三个舅舅都不愿出钱，还是我岳母出的钱。这样活生生的例子里，中老年的父母半生都勤劳温和，可以说都是好人，在一夜间失去了所有，眼神呆滞好像梦里，恰恰是这些身上掉下的骨肉，从小到大有礼貌的乖孩子，给了他们意想不到的彻底一击。我知道有人急着反驳这条，说大多数子女还是好的，但那是别处的事，并不改变以上已经客观真实发生了的事，对我们选择造成的负面影响。</p><p>7、我和老婆从大学恋爱走到现在，十年来一直是黏在一块的，也是彼此的初恋。现在一起做生意也是并排坐着，白天夜晚24小时都不分离，与多数各自上班的夫妻真实相处时间来比较，我们算是结婚20多年了。过年也没有各自回家的说法，向来同手同脚行动，每天有说不完的开心话，在家也要亲亲抱抱举高高，出门就是手拉手走。我不烟不酒，她不施粉黛，我俩的脾气性格三观品味都极其相似，彼此爱慕尊重，可以参考我的签名。对我们来说感情已经到了高度，不需要依赖生孩子来维系婚姻，更不需要二人世界里出现一个不稳定因素。我们都不愿意因为培养孩子时难免的心急心切，分歧争执，破坏夫妻感情。</p><p>8、阶层固化之下，一代胜一代的希望越发渺茫，家家户户都在拼了命送孩子往上爬，但我觉得大多数将来只能依靠父母的遗产留在现有阶层里。因为工作关系我经常接触各类学校，老师和家长，给我的总体感觉就是累，那种被逼着集体忙碌的无力感，为了孩子创造更多有利条件的紧迫感，和一件耗费时间精力巨大的工程开了头不得不继续下去的压力感。像打怪升级一样，25年后感觉到顶级了，系统又给开了新的25年的带孙子关卡。我和老婆都是清高心傲的人，不想同“宝妈宝爸”们一样甘愿付出，不愿屈服于某个设定。</p><p>9、我俩都是独生子女，并且除了父母对其他亲戚血缘十分淡漠，也没有家族传承的旧观念和传宗接代的使命感，同时也是无神论者。对于什么绝后，断代的言论只会觉得无聊无趣，信则有不信则无，仅仅往上数四代的老祖宗，我不认识他，他不知道我，有了后代又怎样，我只是个普通人，几代以后连名字都湮灭了。我一生奉公守法爱国爱家，灾荒捐过款，街边救过猫，已经对得起家人和自己的良心，又不为别人而活，也无惧别人的妄言。</p><p>10、我的父母，她的父母，都同意了我们丁克。我爸说他17岁开始当兵，半生为国半生为家，都没有好好为自己过，希望我和老婆怎么开心怎么过。岳父母曾经催生过，老婆态度坚决，我又和她一个鼻孔出气的，慢慢想通了也就作罢。如今家宅安宁，大家欢喜，我爸妈打牌炒股旅游钓鱼，也很疼爱她。她爸妈也很疼我，还养了个胖橘公猫当小儿子养，早上会叫它“去喊姐姐起床”，然后小舅子来挠门。一大家6个人照样开开心心过，老人不用带小孩，60岁的人精神气质都像年轻了十几岁。他们大把的退休金都能花在自己身上，也能有个安定轻松的晚年，还生劳什子孩子。</p><footer><strong>知乎榛禾木</strong><cite><a href="https://www.zhihu.com/question/326634942/answer/706582055" target="_blank" rel="noopener">现在的部分女生为什么不想生孩子？</a></cite></footer></blockquote><p><strong><a href="https://www.zhihu.com/question/326634942" target="_blank" rel="noopener">现在的部分女生为什么不想生孩子？</a> 结束</strong><br>(这个问题回答摘录至此告一段落，以后可能会有修改更新，更多回答可以参看知乎)</p><h2 id="2019-07-14"><a href="#2019-07-14" class="headerlink" title="2019-07-14"></a>2019-07-14</h2><p>👤 一叶舟 | 心理学本硕，国家二级咨询师</p><blockquote><p>这周我将正式迈入孕37周+的大门，足月了，要随时准备好发动了。</p><p>我那个朴实无华的老公，正穿着大裤衩吭哧吭哧地收拾着待产包，有一搭没一搭地跟我聊着天。</p><p>我笑话他耷拉着的那点肚腩，是二胎爹的幸福肥，要他仔细着别弯腰憋出了屁。他回应我的是老大今天还没拉臭，要不要给喂点西瓜汁。</p><p>看着他仔细地在大包的侧兜里塞进了两小瓶开塞露，我突然一下涌出了眼泪。</p><p>也是，只有他收拾待产包，才会知道我要用到什么。</p><p>生老大时，大夫交代顺产之后必须尽早排尿排便，以免引起尿液滞留，导致类似于子宫移位乃至出血的可怕事情。</p><p>护士还要求，产后第一次的尿液要接在盆里，等她们来检查。</p><p>于是我老公就端着尿盆蹲在卫生间里，吹着口哨，放着水龙头，等我排尿。进出卫生间三次之后，终于“哗啦”一声，完成任务，我俩不自觉地捏了下对方的手，相视一笑，像是什么大事成功了一样。</p><p>那时我想起我们恋爱时第一次一起外出，在宾馆的卫生间里我尴尬地满地转圈，因为我怕尿出来呼啦啦的声音影响了我精心打扮出的女神形象。</p><footer><strong>一叶舟 | 曾奇峰心理工作室</strong><cite><a href="https://mp.weixin.qq.com/s/Wd3lGd6CwXIGT97RBsDmFw" target="_blank" rel="noopener">穿越了“屎尿屁”之后，我们是什么样的伴侣？</a></cite></footer></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;&lt;p&gt;记录这个的缘由，也不是为了做什么，而是我自己发觉我的很多观念已经发生了变化，特别是关于婚姻、家庭……目前还处于比较混乱的状态，做此篇记录是为以后做准备，以后梳理起来会方便很多。正如谚语所说，&lt;strong&gt;&lt;code&gt;罗马不是一天建成的(Rome w
      
    
    </summary>
    
      <category term="生活杂记" scheme="https://muhouer.github.io/categories/%E7%94%9F%E6%B4%BB%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="孕事" scheme="https://muhouer.github.io/tags/%E5%AD%95%E4%BA%8B/"/>
    
  </entry>
  
  <entry>
    <title>趣味生活简史</title>
    <link href="https://muhouer.github.io/posts/61505f7b/"/>
    <id>https://muhouer.github.io/posts/61505f7b/</id>
    <published>2019-07-14T07:16:00.000Z</published>
    <updated>2019-07-21T14:48:22.300Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>行至衣食住行处 坐看世事风云起</code></strong></p><h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><p>本书是《万物简史》作者最新扛鼎之作、其创作灵感源自作者一次石破天惊的发现:房屋不是躲避历史的避难所、而是历史的最终归宿。</p><p>在作者看来，无论世界上发生了什么，不管人们发现了什么，创造了什么，或激烈争夺了什么，最终都会以这种或那种方式投射到你的家里。战争、饥荒、工业革命、启蒙运动……这些看似与我们相距遥远的历史或许就隐藏在你的沙发里和五斗橱里，在你窗帘的皱褶里，在你松软的枕头里，在你家墙上的油漆里，在你家的自来水管道乃至抽水马桶里。于是，作者拿定主意要在自己的房屋里转转，他要在不出家门的情况下引领我们做一次有关世界历史的美妙远足。</p><p>在作者的生花妙笔之下，卫生间是一部个人卫生的历史，厨房是一部烹调的历史，卧室则成了一部爱情、死亡和睡觉的历史。作者还梳理了从建筑学到电力学，从考古学到园艺学，从食物贮藏到流行病、从香料贸易到埃菲尔铁塔，从女性时装到室内装潢等方面的演变脉络，撰写了一部包罗万象的人类居家生活简史。作者以饱满的好奇心、绝妙的智慧心，独具一格的叙事腔调将《万物简史》脸炙人口的风格延续至本书的字里行间，成就了这部思想性与趣味性兼具的神奇之书。</p><h2 id="作者简介"><a href="#作者简介" class="headerlink" title="作者简介"></a>作者简介</h2><p>👤 <strong>比尔·布莱森</strong>，享誉世界的作家。1951年出生于美国艾奥瓦州，后定居英国，曾任职于《泰晤士报》与《独立报》，同时也为《纽约时报》、《国家地理杂志》等刊物撰文。2005年，他被任命为英国久负盛名的杜伦大学校长，并且被众多大学授予荣誉学位。2006年12月，为表彰他在文学上的杰出贡献，英国女王伊丽莎白授予他大英帝国官佐勋章（OBE）。</p><p>布莱森擅长用不同的眼光来看待他所游历的世界，在他的书里，英国式的睿智幽默与美国式的搞笑绝妙地融合在了一起。他的尖刻加上他的博学，让他的文字充满了幽默、机敏和智慧，使他自己成为“目前活在世上的最有趣的旅游文学作家”（《泰晤士报》）。</p><hr><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><h3 id="第1册"><a href="#第1册" class="headerlink" title="第1册"></a>第1册</h3><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h4><p><strong><code>当你从一个崭新的角度来观察一个你非常熟悉的世界时，你心里总是觉得很兴奋。</code></strong></p><h4 id="第一章-现代生活的序幕"><a href="#第一章-现代生活的序幕" class="headerlink" title="第一章  |  现代生活的序幕"></a><strong>第一章 | 现代生活的序幕</strong></h4><blockquote><p>以1851年5月1日在伦敦开幕的“万国工业博览会展览馆”为标志,现代生活的序幕由此拉开,电灯、电话、电报、抽水马桶、麻醉术、室内管道、煤气照明、制冷、汽车、飞机、摩天大楼如雨后春笋般冒出来。突然之间,有史以来第一次,在大多数人的生活当中什么都不缺，到处是一片生机勃勃的景象。</p></blockquote><p><strong><code>戴维·坎那戴恩写到，到世纪之交的时候，“一代精英都不在教堂内而在教堂外”。</code></strong></p><h4 id="第二章-居家的气息"><a href="#第二章-居家的气息" class="headerlink" title="第二章  |  居家的气息"></a><strong>第二章 | 居家的气息</strong></h4><blockquote><p>从古罗马人洞穴到普通住宅再到现代豪宅，居家生活的历史就是一部不断追求舒适的历史。你也许会有点吃惊地想到，对于这栋房子或任何其他房子来说，没有哪个部件的出现是必然的。一切都得经过思考——门呀，窗呀，烟囱呀，楼梯呀——其中许多经过了长时间的试验，比你想象的时间还要长得多。</p></blockquote><ol><li><p><strong><code>在最初99%的历史里，人类没有干多少事，除了繁衍后代，生存下来。</code></strong></p></li><li><p><strong><code>从植物中获取食物是一项艰苦的工作。把小麦、稻谷、玉米、大麦和其他草类转变成主食是人类历史上一个伟大的成就，但也是一个意料之外的成就。</code></strong></p></li><li><p><strong><code>这一切又使我们想到，我们对古人的生活方式和习惯知道得如此之少，甚至连想象都不敢想象。带着那种想法，我们终于要走进房子，并开始认识到，我们对里面的事情也是知道得如此之少。</code></strong></p></li></ol><h4 id="第三章-门厅"><a href="#第三章-门厅" class="headerlink" title="第三章  |  门厅"></a><strong>第三章 | 门厅</strong></h4><blockquote><p>没有哪间屋子的地位在历史上落得比门厅更靠后。门厅现在是擦鞋底、挂帽子的地方，而曾经却是住宅里最重要的屋子。直到烟囱问世，使得房子一层一层往上发展成了可能，从那之后，人们开始有了隐私和个人空间的概念，而房间的空间拓展正是建立在人们对效用和隐私不断改变的看法之上的。</p></blockquote><p><strong><code>生活很艰难。在整个中世纪，每个人在一生中要把相当多的时间完全用来求生存，饥荒是司空见惯的。中世纪的世界是个没有储备的世界。</code></strong></p><h4 id="第四章-厨房"><a href="#第四章-厨房" class="headerlink" title="第四章  |  厨房"></a><strong>第四章 | 厨房</strong></h4><p>值得注意的是，维多利亚时代的人的胃口其实还是比较克制的。暴饮暴食的黄金时代，实际上是在18世纪。那是约翰牛时代，是有史以来哪个国家也没有创造出过的面色最红、吃得过多、随时会得冠心病的形象，为的是给别的国家留下个好印象。在18世纪的最初10年里，英国历史上两位最胖的君主花了大量的精力来吃，这也许不是偶然的。</p><ol><li><strong><code>这类事情吸引报界的注意力，恰恰说明它们是个别事件，而不是惯常现象。</code></strong></li><li><strong><code>令人感到意外的是，在很长时间里，开罐头仍是个严重的障碍。</code></strong></li><li><strong><code>杰斐逊在食物方面还是个伟大的冒险家。他有许多别的成就，其中，他在美国是把土豆切成长条进行油炸的第一人。</code></strong></li><li><strong><code>无法掌握自己饮食的人也往往确实吃得很差。许多比较穷的人的饮食是相当单调的。</code></strong></li></ol><h4 id="第五章-洗碟间和食品库"><a href="#第五章-洗碟间和食品库" class="headerlink" title="第五章  |  洗碟间和食品库"></a><strong>第五章 | 洗碟间和食品库</strong></h4><p>在住宅的设计过程中，越来越注意把仆人挡在看不见的地方，与主人家隔开一段距离，除了绝对需要以外。厨房刚够放一张桌子和两把椅子，连在一起的洗碟间和食品库的空间更小，因为很大程度上那里是仆人们的天地。这无疑是个很怪的世界，仆人构成了人类的一个阶级，从根本上说，他们的存在<br>是为了确保人类的另一个阶级在想要什么时，几乎马上就能伸手拿到什么。</p><ol><li><strong><code>仆人构成了人类的一个阶级，从根本上说，他们的存在是为了确保人类的另一个阶级在想要什么时，几乎马上就能伸手拿到什么。仆人们做了所有这一切，受到的待遇往往是很可怕的。</code></strong></li><li><strong><code>主人可以摆布仆人，仆人也同样可以摆布主人。</code></strong></li></ol><h3 id="第2册"><a href="#第2册" class="headerlink" title="第2册"></a>第2册</h3><h4 id="第六章-保险丝盒"><a href="#第六章-保险丝盒" class="headerlink" title="第六章  |  保险丝盒"></a><strong>第六章 | 保险丝盒</strong></h4><p>我们忘了，在发明电以前，世界上的光线是多么暗淡。一支蜡烛—支好的蜡烛—所提供的照度，勉强相当于一盏100电灯1%的照度。打开你家的冰箱门，里面射出的光比18世纪大多数家庭享有的光的总和还多。在历史的大部分时间里，夜晚的世界确实是个很黑暗的地方。</p><ol><li><strong><code>他们开始制造容量为40加仑的专用油桶。直到今天，这种桶仍然是石油的标准计量单位。</code></strong></li><li><strong><code>煤气灯提供极好的总体照明。它使阅读、打牌甚至交谈更加惬意……人们看书看得更多，睡觉睡得更晚。</code></strong></li><li><strong><code>技术进步提高了光的质量，但也增加了火灾的风险。</code></strong></li><li><strong><code>在最初几年里，没有人会想到插头和插座。因此，任何家用电器都必须直接接到系统上。</code></strong></li><li><strong><code>爱迪生的天才并不在于发明了电灯，而在于创造了以商业规模生产和供应电灯的方法。而后者是一项大得多的、更富于挑战性的事业。</code></strong></li></ol><h4 id="第七章-起居室"><a href="#第七章-起居室" class="headerlink" title="第七章  |  起居室"></a><strong>第七章 | 起居室</strong></h4><p>若要领会舒适的家庭生活的精神，没有哪里比得上个有着奇特名字的地方:起居室(drawing room)这个词是一个古老得多的词 withdrawing room的缩略形式，意思是“一处家人可以离开家里的其他人以享有更多隐私的空间”。这个词根本没有在英语里完全扎根和得到广泛使用，到14世纪中叶，除了在最上流的社会里以外，这个词被sitting room取而代之。</p><h4 id="第八章-餐厅"><a href="#第八章-餐厅" class="headerlink" title="第八章  |  餐厅"></a><strong>第八章 | 餐厅</strong></h4><p>出现餐厅的原因，不是大家突然想要在一个专门的地方吃饭，总的说来是由于家里女主人的一个简单的愿望，她不想让漂亮的装有软垫的新家具沾上油污。我们最近发现，这类家具价钱很贵，得意的主人不愿意看到任何人在上面擦手指。餐厅的到来标志着一种变化，不仅是摆饭地方的变化，而且是吃饭方式和吃饭时间的变化。</p><ol><li><strong><code>人体需要维生素和矿物质，这是一门学问，要过相当长的时间才搞明白。</code></strong></li><li><strong><code>即使今天，要是你开始掉头发，或者脚踝肿的厉害，你首先想到的不大可能是最近吃了什么，你更不会想一想你没有吃什么。</code></strong></li><li><strong><code>饮食不当不光是坏血病的原因，也是一系列普通疾病的原因，认识到这一点是个相当缓慢的过程。</code></strong></li><li><strong><code>维生素K跟字母顺序毫无关系。它之所以叫维生素K，是因为发现这种维生素的人、丹麦的亨里克·丹根据它在血液凝结过程中的作用，管它叫”凝血维生素(Koagulations vitamin)“。</code></strong></li><li><strong><code>泛酸和生物素这两种维生素没有数字编号，这很大程度上是因为它们从来没有给我们制造过麻烦。</code></strong></li><li><strong><code>氯化钠是一种很怪的物质，它由两种及其活跃的元素组成：氯、钠。钠和氯是矿物界的地狱天使，然而氯化钠却是一种无毒的食用盐。</code></strong></li><li><strong><code>没有香料死不了人，但为了香料死了好多人。</code></strong></li><li><strong><code>制造商做了实验，增加了齿尖的数量——有时候多大6个——最后在19世纪末确定为4个，因为4个齿尖的叉子人们用起来似乎最自在。</code></strong></li><li><strong><code>过去人们的大部分卡路里都是在早餐时间和中午摄入的，晚餐时间只是补充少量食物，然而现在，那样的摄入方法几乎完全颠倒了过来。</code></strong></li></ol><h4 id="第九章-地下室"><a href="#第九章-地下室" class="headerlink" title="第九章  |  地下室"></a><strong>第九章 | 地下室</strong></h4><p>原先，地下室主要用作存放煤的地方。今天，里面放着锅炉、不用的衣箱、不合时节的体育器材以及许多贴了封条的纸板箱。那些箱子几乎永远不会再打开，但每次搬家都要小心翼翼地从一栋房子搬到另一栋房子，认为有一天会有人想要一些已经在箱子里放了25年的要儿衣服。它不是个很合意的场所，但也有个补过的优点:让你了解一点房子上层建筑的情况。</p><ol><li><strong><code>通过阅读、咨询、凭借灵感进行的实验，他们成功地设计并监督完成了新大陆有史以来最伟大的工程，他们成为历史上第一批通过开掘运河来学会怎么开掘运河的人。</code></strong></li></ol><h3 id="第3册"><a href="#第3册" class="headerlink" title="第3册"></a>第3册</h3><h4 id="第十章-过道"><a href="#第十章-过道" class="headerlink" title="第十章  |  过道"></a><strong>第十章 | 过道</strong></h4><p>过道是寓所里最不合意、最阴暗的地方，因为它没有窗户，必须借助从邻近房间开着的门里透进来的任何自然光线。靠近过道中间的地方，有一扇可以关的门——在早先的年代，这门无疑是关着的——把住宅的服务区和对面的私人区分隔开。房子完工的时候，不可能有它。它显然是为了放置在1851年还没有的某种东西才设计的，而那个东西将会改变世界，改变的速度将超出任何人的想象。</p><h4 id="第十一章-书房"><a href="#第十一章-书房" class="headerlink" title="第十一章  |  书房"></a><strong>第十一章 | 书房</strong></h4><p>虽然“书房”这个名字使它听起来像个了不起的地方，但实际上只是个名字好听的贮藏室而已，即使在天气暖和的月份里，里面也是又暗又冷，你都不想在里面久留。如今，书房是旧家具和旧画片的最后避难所—这些东西夫妻的一方十分欢，另一方却乐意看到将其付之一炬。我们现在去那里的理由几乎只有一条，那就是检查一下捕鼠夹。</p><ol><li><strong><code>很有可能，历史上爆发的最严重的鼠疫似乎跟大家鼠毫无关系，至少在英国是这样。</code></strong></li><li><strong><code>很少有人喜欢蝙蝠，这确实是很不幸的，因为蝙蝠干的好事要比坏事多得多。</code></strong></li><li><strong><code>世界上的蝙蝠数量，要比大多数人知道的多得多。实际上，全部哺乳动物种类总共大约1100种，其中大约1/4是蝙蝠。从大小方面说，小到熊蜂蝙蝠——名副其实，它们不过熊蜂那么大，因而是最小的哺乳动物，大到澳大利亚和南亚的翼展达6英尺的巨大狐蝠，应有尽有。</code></strong></li><li><strong><code>哪里的事态都有可能变得越来越糟，而且糟得多。</code></strong></li></ol><h4 id="第十二章-花园"><a href="#第十二章-花园" class="headerlink" title="第十二章  |  花园"></a><strong>第十二章 | 花园</strong></h4><p>对于许多人来说，今天所谓的园艺就是草坪，几乎不指任何别的东西。美国的草坪所占的面积为5万平方英里，超过了任何一种农作物。家庭草坪里的绿草要做的事，和自然界的野草是一样的，那就是长到大约2英尺高，开花，枯黄，死亡。对于我们大多数人来说，养一个漂亮的草坪，几乎是我们所干的最不绿色的事情，这是极具讽刺意味的。</p><ol><li><strong><code>任何形式的侵入他人地界，不管多么无辜，多么轻微，势必会被看成是恶意的。</code></strong></li><li><strong><code>对我们大多数人来说，养一个漂亮的草坪，几乎是我们干的最不绿色的事情，这是极具讽刺意味的。</code></strong></li></ol><h4 id="第十三章-紫色屋"><a href="#第十三章-紫色屋" class="headerlink" title="第十三章  |  紫色屋"></a><strong>第十三章 | 紫色屋</strong></h4><p>把它叫作紫色屋没有别的理由，只因为我们搬进去住的时候，那间屋子的墙壁是漆成那种颜色的。在原先的图纸上，它本来标着“客厅”两个字，但后来在调整的过程中把那个重要房间移到了隔壁。在那次调整中，仆人们没了拟建的“配餐室”，而给了马香先生一间宽敞的餐厅。不管叫什么名字，反正这间屋子是打算用作一种客厅的，很可能是用来接待喜欢的客人。</p><ol><li><strong><code>实际情况并不是那样一丝不差的，建筑风格不会仅仅因为一位君主的死去而改变，也不会因为一个朝代很长而保持不变。</code></strong></li><li><strong><code>它是世界的最后一栋房子，它的前面是一块未经探索的大陆，它的背后是整个已知的世界。这栋房子背向那个旧世界，眺望那个空荡荡的未知的新世界。</code></strong></li><li><strong><code>实际上什么东西都得从一个远方的代理商那里订货。什么要求都得说得清清楚楚，但最终你还得依赖一个陌生人的判断力和诚实的服务，让人失望的可能性是很大的。</code></strong></li></ol><h4 id="第十四章-楼梯"><a href="#第十四章-楼梯" class="headerlink" title="第十四章  |  楼梯"></a><strong>第十四章 | 楼梯</strong></h4><p>现在，我们来到了这栋房子里最危险的部分。实际上，无论在哪里，这都是最可能出现险情的环境之楼梯。谁也不知道楼梯到底有多危险，因为说来也怪，这方面的记录很少。据最保守的统计，在造成偶然死亡的最常见的原因当中，在楼梯上摔倒排在第二位，落在车祸后面，但遥遥领先于溺死、烧死和其他可怕的不幸事故。</p><ol><li><strong><code>楼梯的安全问题不是一个而是两个问题：“要避免引发事故的情况出现；要设计这样的楼梯：万一发生事故时，能把伤痛降低到最低程度。”</code></strong></li><li><strong><code>虽然白色在整个19世纪不断地有所改善，但直到20世纪40年代，由于在涂料里添加了氧化钛，才有了真正鲜亮和耐久的白色。……耐久的深黑色颜料是从焦油和沥青中提炼出来的，19世纪末以前还不容易弄得到。</code></strong></li><li><strong><code>现在，我们可以走上楼梯，来到一个房间。它也许从来没有真正毒死过什么人，但它很可能是带来痛苦和绝望的地方。它所带来的痛苦和绝望，要超过家里所有别的房间所带来的痛苦和绝望的总和。</code></strong></li></ol><p>待继续……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;code&gt;行至衣食住行处 坐看世事风云起&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;内容简介&quot;&gt;&lt;a href=&quot;#内容简介&quot; class=&quot;headerlink&quot; title=&quot;内容简介&quot;&gt;&lt;/a&gt;内容简介&lt;/h2&gt;&lt;p&gt;本书是《万物简史》作
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://muhouer.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="趣味生活简史" scheme="https://muhouer.github.io/tags/%E8%B6%A3%E5%91%B3%E7%94%9F%E6%B4%BB%E7%AE%80%E5%8F%B2/"/>
    
      <category term="历史" scheme="https://muhouer.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>体重记录</title>
    <link href="https://muhouer.github.io/posts/e93199a0/"/>
    <id>https://muhouer.github.io/posts/e93199a0/</id>
    <published>2019-07-13T14:56:00.000Z</published>
    <updated>2019-07-25T17:58:50.391Z</updated>
    
    <content type="html"><![CDATA[<div id="echarts8607" style="width:81%;height:400px;margin:0 auto"></div><script type="text/javascript">var myChart=echarts.init(document.getElementById("echarts8607")),option={tooltip:{trigger:"axis"},title:{show:!0,text:"日常体重记录"},legend:{data:["体重"]},toolbox:{show:!0,orient:"horizontal",x:"right",y:"top",color:["#1e90ff","#22bb22","#4b0082","#d2691e"],backgroundColor:"rgba(0,0,0,0)",borderColor:"#ccc",borderWidth:0,padding:5,showTitle:!0,feature:{mark:{show:!0,title:{mark:"辅助线-开关",markUndo:"辅助线-删除",markClear:"辅助线-清空"},lineStyle:{width:1,color:"#1e90ff",type:"dashed"}},dataZoom:{show:!0,title:{dataZoom:"区域缩放",dataZoomReset:"区域缩放-后退"}},magicType:{show:!0,title:{line:"动态类型切换-折线图",bar:"动态类型切换-柱形图",stack:"动态类型切换-堆积",tiled:"动态类型切换-平铺"},type:["line","bar","stack","tiled"]},restore:{show:!0,title:"还原",color:"black"},saveAsImage:{show:!0,title:"保存为图片",type:"jpeg",lang:["点击本地保存"]},myTool:{show:!0,title:"自定义扩展方法",icon:"image://../asset/ico/favicon.png",onclick:function(){alert("myToolHandler")}}}},calculable:!0,dataZoom:{show:!0,realtime:!0,start:20,end:80},xAxis:{type:"category",boundaryGap:!1},yAxis:{type:"value",min:60,axisLabel:{formatter:"{value} (kg)"}},series:[{name:"体重",type:"line",data:[{name:"2019-02-10",value:["2019-02-10",65]},{name:"2019-03-10",value:["2019-03-10",67.5]},{name:"2019-03-23",value:["2019-03-23",68.75]},{name:"2019-03-24",value:["2019-03-24",68.25]},{name:"2019-03-30",value:["2019-03-30",69.35]},{name:"2019-04-01",value:["2019-04-01",67.8]},{name:"2019-04-02",value:["2019-04-02",67.3]},{name:"2019-04-07",value:["2019-04-07",67.9]},{name:"2019-04-09",value:["2019-04-09",68.9]},{name:"2019-04-11",value:["2019-04-11",69.05]},{name:"2019-04-12",value:["2019-04-12",68.3]},{name:"2019-04-14",value:["2019-04-14",67.2]},{name:"2019-04-15",value:["2019-04-15",69.25]},{name:"2019-04-18",value:["2019-04-18",68.35]},{name:"2019-04-22",value:["2019-04-22",68.4]},{name:"2019-04-23",value:["2019-04-23",67.75]},{name:"2019-04-24",value:["2019-04-24",68.45]},{name:"2019-04-26",value:["2019-04-26",67.5]},{name:"2019-04-27",value:["2019-04-27",67.6]},{name:"2019-04-28",value:["2019-04-28",67.65]},{name:"2019-04-29",value:["2019-04-29",67.1]},{name:"2019-04-30",value:["2019-04-30",66.75]},{name:"2019-05-02",value:["2019-05-02",68.5]},{name:"2019-05-04",value:["2019-05-04",66.4]},{name:"2019-05-07",value:["2019-05-07",68.3]},{name:"2019-05-08",value:["2019-05-08",67.7]},{name:"2019-05-09",value:["2019-05-09",67.35]},{name:"2019-05-11",value:["2019-05-11",66.6]},{name:"2019-05-12",value:["2019-05-12",67.4]},{name:"2019-05-13",value:["2019-05-13",66.95]},{name:"2019-05-14",value:["2019-05-14",67.55]},{name:"2019-05-16",value:["2019-05-16",67]},{name:"2019-05-18",value:["2019-05-18",68.4]},{name:"2019-05-19",value:["2019-05-19",66.4]},{name:"2019-05-20",value:["2019-05-20",67.4]},{name:"2019-05-21",value:["2019-05-21",66.8]},{name:"2019-05-22",value:["2019-05-22",67.65]},{name:"2019-05-23",value:["2019-05-23",67.4]},{name:"2019-05-24",value:["2019-05-24",67.5]},{name:"2019-05-25",value:["2019-05-25",67.4]},{name:"2019-05-26",value:["2019-05-26",67.4]},{name:"2019-05-27",value:["2019-05-27",67.3]},{name:"2019-05-28",value:["2019-05-28",67.4]},{name:"2019-05-30",value:["2019-05-30",65.95]},{name:"2019-06-02",value:["2019-06-02",66.95]},{name:"2019-06-03",value:["2019-06-03",67]},{name:"2019-06-04",value:["2019-06-04",67.5]},{name:"2019-06-05",value:["2019-06-05",68.35]},{name:"2019-06-06",value:["2019-06-06",67.6]},{name:"2019-06-07",value:["2019-06-07",67.9]},{name:"2019-06-09",value:["2019-06-09",67.55]},{name:"2019-06-11",value:["2019-06-11",67.25]},{name:"2019-06-13",value:["2019-06-13",67.6]},{name:"2019-06-14",value:["2019-06-14",67.25]},{name:"2019-06-15",value:["2019-06-15",66.7]},{name:"2019-06-16",value:["2019-06-16",66.15]},{name:"2019-06-18",value:["2019-06-18",67.5]},{name:"2019-06-19",value:["2019-06-19",65.55]},{name:"2019-06-22",value:["2019-06-22",67.5]},{name:"2019-06-23",value:["2019-06-23",66.8]},{name:"2019-06-26",value:["2019-06-26",67.55]},{name:"2019-06-28",value:["2019-06-28",66.75]},{name:"2019-06-29",value:["2019-06-29",66.2]},{name:"2019-07-03",value:["2019-07-03",68.45]},{name:"2019-07-05",value:["2019-07-05",68.35]},{name:"2019-07-07",value:["2019-07-07",67.75]},{name:"2019-07-08",value:["2019-07-08",69.2]},{name:"2019-07-10",value:["2019-07-10",68.75]},{name:"2019-07-11",value:["2019-07-11",68.15]},{name:"2019-07-13",value:["2019-07-13",67.95]},{name:"2019-07-15",value:["2019-07-15",62.3]},{name:"2019-07-16",value:["2019-07-16",68.05]},{name:"2019-07-17",value:["2019-07-17",67.35]},{name:"2019-07-18",value:["2019-07-18",67]},{name:"2019-07-19",value:["2019-07-19",62.35]},{name:"2019-07-21",value:["2019-07-21",66.95]},{name:"2019-07-22",value:["2019-07-22",66.65]},{name:"2019-07-24",value:["2019-07-24",68.45]},{name:"2019-07-25",value:["2019-07-25",67.8]}]}]};myChart.setOption(option)</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div id=&quot;echarts8607&quot; style=&quot;width:81%;height:400px;margin:0 auto&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;var myChart=echarts.init(document.ge
      
    
    </summary>
    
      <category term="日常生活" scheme="https://muhouer.github.io/categories/%E6%97%A5%E5%B8%B8%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="体重" scheme="https://muhouer.github.io/tags/%E4%BD%93%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>更新记录</title>
    <link href="https://muhouer.github.io/posts/77b56474/"/>
    <id>https://muhouer.github.io/posts/77b56474/</id>
    <published>2019-07-13T12:15:00.000Z</published>
    <updated>2019-07-13T12:28:29.561Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th align="left">时间</th><th align="left">更新说明</th></tr></thead><tbody><tr><td align="left">2019-07-13</td><td align="left">内容补充：更新记录</td></tr><tr><td align="left">2019-07-13</td><td align="left">功能添加：点击效果</td></tr><tr><td align="left">2019-07-05</td><td align="left">功能优化：博客链接</td></tr><tr><td align="left">2019-07-03</td><td align="left">内容补充：关于我</td></tr><tr><td align="left">2019-07-02</td><td align="left">功能添加：网站运行时间</td></tr><tr><td align="left">2019-07-01</td><td align="left">功能添加：文字统计、阅读时间统计</td></tr><tr><td align="left">2019-06-25</td><td align="left">功能添加：Hexo博客初始化。</td></tr><tr><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;left&quot;&gt;时间&lt;/th&gt;&lt;th align=&quot;left&quot;&gt;更新说明&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td align=&quot;left&quot;&gt;2019-07-13&lt;/td&gt;&lt;td align=&quot;left&quot;
      
    
    </summary>
    
      <category term="Muhouer&#39;s blog" scheme="https://muhouer.github.io/categories/Muhouer-s-blog/"/>
    
    
      <category term="更新记录" scheme="https://muhouer.github.io/tags/%E6%9B%B4%E6%96%B0%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客SEO优化之链接优化</title>
    <link href="https://muhouer.github.io/posts/a8db5a9b/"/>
    <id>https://muhouer.github.io/posts/a8db5a9b/</id>
    <published>2019-07-13T07:59:00.000Z</published>
    <updated>2019-07-13T08:42:41.086Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="默认的permalink"><a href="#默认的permalink" class="headerlink" title="默认的permalink"></a>默认的permalink</h3><p><code>permalink: :year/:month/:day/:title/</code></p><h3 id="缺点如下"><a href="#缺点如下" class="headerlink" title="缺点如下"></a>缺点如下</h3><ol><li>命名方式层次过多，爬虫会嫌麻烦。</li><li>对于中文命名，如果要引用自己的链接，会重新编码成好长一串，超级麻烦。</li><li>中文链接在<a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a><a href="http://www.google.con" target="_blank" rel="noopener">Google</a>权重很低。</li></ol><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>有没有其他办法呢？实在想不出来了，还是因为我比较懒，喜欢现成的。皇天不负有心人，通过一番搜索，终于找到一个插件<a href="https://github.com/Rozbo/hexo-abbrlink" target="_blank" rel="noopener"><code>hexo-abbrlink</code></a>。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>之前如果有做<strong><em><code>评论</code></em></strong>或<strong><em><code>访问计数</code></em></strong>配置的，会全部失效,一切重头开始。</p><hr><h2 id="hexo-abbrlink"><a href="#hexo-abbrlink" class="headerlink" title="hexo-abbrlink"></a>hexo-abbrlink</h2><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>对标题+时间进行<code>md5</code>然后再转<code>base64</code>，保存在<code>front-matter</code>中。</p><h3 id="如何安装"><a href="#如何安装" class="headerlink" title="如何安装"></a>如何安装</h3><p>添加插件到<code>hexo</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>修改config.yml文件中的永久链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: posts/:abbrlink/ #  “posts/” 可自行更换</span><br></pre></td></tr></table></figure><p>两种设置：<br>alg - 算法（）<br>rep - Represent（生成的链接可以以十六进制或十六进制值表示）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># abbrlink config</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法(Algorithm):目前支持crc16和crc32，默认为crc16</span><br><span class="line">  rep: hex    # 表示(Represent):生成的链接可以以十六进制或十进制值表示，默认十进制</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p>生成的链接如下所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/66c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/65535.html</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">crc32 &amp; hex</span><br><span class="line">https://post.zz173.com/posts/8ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https://post.zz173.com/posts/1690090958.html</span><br></pre></td></tr></table></figure><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p><code>crc16</code>的最大帖子数为<code>65535</code>。(对于个人博客网站，这个数字还算不错)</p><h3 id="更多信息"><a href="#更多信息" class="headerlink" title="更多信息"></a>更多信息</h3><p><a href="https://post.zz173.com/detail/hexo-abbrlink.html" target="_blank" rel="noopener">hexo-abbrlink介绍</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/Rozbo/hexo-abbrlink#limitation" target="_blank" rel="noopener">https://github.com/Rozbo/hexo-abbrlink#limitation</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;h3 id=&quot;默认的permalink&quot;&gt;&lt;a href=&quot;#默认的permalink&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="静态博客" scheme="https://muhouer.github.io/categories/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://muhouer.github.io/tags/hexo/"/>
    
      <category term="SEO优化" scheme="https://muhouer.github.io/tags/SEO%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>工作2年感悟</title>
    <link href="https://muhouer.github.io/posts/d3b108fe/"/>
    <id>https://muhouer.github.io/posts/d3b108fe/</id>
    <published>2019-07-10T15:22:00.000Z</published>
    <updated>2019-07-24T18:03:14.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>从2017年7月开始工作，至今已有2年。工作已是第二份工作，之前一直有思考，不过没有记录，以后要养成记录的习惯，这是个好习惯。</p><p>……(太矫情，写完之后，中间部分全部删了🙃)</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以后在职场上一定注意：</p><ol><li>自信，一定要自信，即便你能力或技术不是很好。</li><li>不会的一定去查、去问，不能憋在那避而不谈。</li><li>能利用的资源一定要利用，那样会节省很多不必要的力气。资历老说话就是好使、众人拾材火焰高。</li><li>不能忘记学习、成长，工作不是你的全部，除了工作以外，一定要坚持学习，时间会证明：一点点成长最后会给你带来意想不到的收获。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;从2017年7月开始工作，至今已有2年。工作已是第二份工作，之前一直有思考，不过没有记录，以后要养成记录的习惯，这是个好习惯
      
    
    </summary>
    
      <category term="工作" scheme="https://muhouer.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
      <category term="感悟" scheme="https://muhouer.github.io/tags/%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>使用GitHub搭建一个自己的hexo博客</title>
    <link href="https://muhouer.github.io/posts/9fe43db6/"/>
    <id>https://muhouer.github.io/posts/9fe43db6/</id>
    <published>2019-07-08T14:51:00.000Z</published>
    <updated>2019-07-11T16:38:56.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>一直想搭建一个个人博客，无奈有拖延症，一直拖到现在。为什么开始做了呢？最近压力很大，为了防止乱花钱，给自己找点事做。于是，兜兜转转又回到搭建博客的事，来来回回看了很多静态博客(纠结症)，比如<a href="https://github.com/docsifyjs/docsify" target="_blank" rel="noopener">docsify</a>、<a href="https://github.com/vuejs/vuepress" target="_blank" rel="noopener">VuePress</a>等等，最终还是选择了<a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">hexo</a>，毕竟这也算是我静态博客的启蒙，不能忘本，第一个系列当然给<code>Hexo</code>.</p><h2 id="本地部署过程"><a href="#本地部署过程" class="headerlink" title="本地部署过程"></a>本地部署过程</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>关于<code>node</code>、<code>npm</code>、<code>git</code>等的安装，在这里先不展开，以后抽空补上。</p><h3 id="安装-hexo-客户端"><a href="#安装-hexo-客户端" class="headerlink" title="安装 hexo 客户端"></a>安装 hexo 客户端</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h3 id="创建hexo的文件夹-文件夹名称hexo可修改为其他"><a href="#创建hexo的文件夹-文件夹名称hexo可修改为其他" class="headerlink" title="创建hexo的文件夹(文件夹名称hexo可修改为其他)"></a>创建hexo的文件夹(文件夹名称hexo可修改为其他)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd hexo # hexo 改为自己命名的文件夹名称</span><br><span class="line">hexo init # hexo 初始化</span><br></pre></td></tr></table></figure><hr><h3 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h3><p><code>hexo</code>本身自带 landscape 主题，不过个人觉得比较丑，改为了比较简约的<code>next</code> 主题。接下来主题均基于<code>next</code>主题</p><h4 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/iissnan/hexo-theme-next</span><br></pre></td></tr></table></figure><h4 id="修改-theme"><a href="#修改-theme" class="headerlink" title="修改 theme"></a>修改 theme</h4><p>编辑 hexo/_config.yml，找到 theme 那一行配置，修改为 next</p><h3 id="本地启动看看"><a href="#本地启动看看" class="headerlink" title="本地启动看看"></a>本地启动看看</h3><p>安装完之后，我们可以在本地启动看看博客初始化的效果。</p><h4 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>hexo 最终运行的是静态文件，包括js，css和html等，这些文件统一放在 public 文件夹。</p><h4 id="安装-hexo-server"><a href="#安装-hexo-server" class="headerlink" title="安装 hexo-server"></a>安装 hexo-server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-server --save</span><br></pre></td></tr></table></figure><h4 id="启动-server"><a href="#启动-server" class="headerlink" title="启动 server"></a>启动 server</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>在浏览器打开 localhost:4000，会看到一个 Hello World的页面。恭喜你，部署成功。</p><hr><h3 id="添加“分类”，“关于”和“标签”菜单"><a href="#添加“分类”，“关于”和“标签”菜单" class="headerlink" title="添加“分类”，“关于”和“标签”菜单"></a>添加“分类”，“关于”和“标签”菜单</h3><p>到此已经把博客安装好了，不过要想看起来更好点，还需要做些其他配置。</p><h4 id="取消-tags、about、categories-注释"><a href="#取消-tags、about、categories-注释" class="headerlink" title="取消 tags、about、categories 注释"></a>取消 tags、about、categories 注释</h4><p>在主题配置文件<code>next/_config.yml</code> 在<code>menu</code>下去掉<code>tags</code>、<code>about</code>、<code>categories</code> 注释。</p><h4 id="创建-tags，about，categories"><a href="#创建-tags，about，categories" class="headerlink" title="创建 tags，about，categories"></a>创建 tags，about，categories</h4><p>在 hexo 文件夹下执行以下shell命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>会在 source 文件夹生成 tags 文件夹，编辑里面的 index.md ，添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br></pre></td></tr></table></figure><p>安装同样操作即可添加 categories；<br>添加<code>about</code>相对简单，不需要修改 md 文件的 type，因为<code>tags</code>、<code>categories</code>是特殊目录类型，<code>about</code>只是简单的一个 md。</p><h4 id="为文章添加标签和分类"><a href="#为文章添加标签和分类" class="headerlink" title="为文章添加标签和分类"></a>为文章添加标签和分类</h4><p>在文章 md 文件开头 title 的下面，增加类似，就可以归类到<code>tag</code>和 <code>category</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">tags: #文章标签可，空，多标签请用格式[tag1,tag2,tag3]，如下，注意!!&quot;tags:&quot;后面有个空格</span><br><span class="line">tags: [tag1, tag2, tag3, ...]</span><br><span class="line"># 下面这种方式似乎仅限于hexo 3.0，应该包括以上吧...</span><br><span class="line">tags: </span><br><span class="line">- tags1</span><br><span class="line">- tags2</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 这种方式似乎仅限于hexo 3.0，应该包括以上吧...</span><br><span class="line">categories: </span><br><span class="line">- tags_level_1</span><br><span class="line">- tags_level_2</span><br><span class="line">- tags_level_3</span><br><span class="line">- ...</span><br></pre></td></tr></table></figure><hr><h3 id="添加头像图片"><a href="#添加头像图片" class="headerlink" title="添加头像图片"></a>添加头像图片</h3><p>在 hexo/_config.yml 找到配置 avatar，增加图片路径，注意图片类型要对的上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: /images/avatar.jpeg</span><br></pre></td></tr></table></figure><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new post new1</span><br></pre></td></tr></table></figure><p>就会在 source/_post 文件夹下生成 new1.md 文件，编辑 md 文件即可。<br>这里为什么是 post ？<br>这里涉及 hexo 的模版行为，在 scaffolds 目录下初始定义了3个模板，draft、page、post，文章就是用到了 post。</p><h2 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h2><p>本地服务起来之后，基本信息无误，可以先尝试部署到 GitHub 上，之后再慢慢迭代，总会变得更好！</p><h3 id="github上新建一个仓库"><a href="#github上新建一个仓库" class="headerlink" title="github上新建一个仓库"></a>github上新建一个仓库</h3><p>登录github后，在界面右上角用户信息点击左边的加号，新建一个repository<br><img src="/images/new_github_repository.png" width="500px" height="300px" align="center"><br>然后给新建的仓库起个名字，注意：这个名字必须跟用户名一致，github才会默认设置成用户的博客。必须选择public，否则即便部署完成访问也会404。<br><img src="/images/201907092345.png" width="1000px" height="300px" align="center"></p><h3 id="将本地搭建好的hexo发布到github"><a href="#将本地搭建好的hexo发布到github" class="headerlink" title="将本地搭建好的hexo发布到github"></a>将本地搭建好的hexo发布到github</h3><p>下面是在项目中生成静态文件的命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>简写，结果是一样的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>执行完以上代码，会在项目的根目录下生成public文件夹</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h3 id="修改网站配置文件-config-yml-添加deploy信息"><a href="#修改网站配置文件-config-yml-添加deploy信息" class="headerlink" title="修改网站配置文件_config.yml,添加deploy信息"></a>修改网站配置文件_config.yml,添加deploy信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git </span><br><span class="line">  repo: git@github.com:muhouer/muhouer.github.io.git </span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>上面的repo的配置信息，替换成自己的项目名字</p><hr><h3 id="设置SSH-Keys"><a href="#设置SSH-Keys" class="headerlink" title="设置SSH Keys"></a>设置SSH Keys</h3><ol><li><p>先检查机器上是否已经存在id_rsa.pub文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ls -al ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>不存在的话执行以下命令生成，一路回车即可。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;xxxxxx@xxx.com&quot; # 改成自己的邮箱</span><br></pre></td></tr></table></figure></li><li><p>复制<code>id_rsa.pub</code>文件内容，在<code>GitHub</code>的 settings 中，点选 SSH keys，添加一个 key，将内容粘贴进去。</p></li><li><p>测试是否添加成功，在刚刚的机器上输入，配置成功会有类似如下提示，至此本地跟远程github的连接已经建立</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><img src="/images/201907100002.png" width="90%" height="200px" align="center"><ol start="5"><li><p>在项目中，直接生成静态文件，上传就可以了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean  //清除缓存文件db.json和已生成的静态文件public</span><br><span class="line">$ hexo g   //生成网站静态文件到默认设置的public文件夹</span><br><span class="line">$ hexo d   //部署网站到设定的仓库</span><br></pre></td></tr></table></figure></li><li><p>部署完成之后，访问 <a href="https://muhouer.github.io/">https://muhouer.github.io/</a> ,改成你自己的地址即可访问。</p></li></ol><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>以上就是在GitHub上搭建一个自己的hexo博客的大致过程，目前还是比较简单，接下来几篇将会记录一下next主题的相关配置以及文章美化方面的内容，以防记性不好，最近老是健忘。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://durant35.github.io/2016/07/16/hexo_hexo%E5%88%86%E7%BA%A7%E7%9B%AE%E5%BD%95%E4%B8%8E%E5%A4%9A%E6%A0%87%E7%AD%BE/" target="_blank" rel="noopener">http://durant35.github.io/2016/07/16/hexo_hexo%E5%88%86%E7%BA%A7%E7%9B%AE%E5%BD%95%E4%B8%8E%E5%A4%9A%E6%A0%87%E7%AD%BE/</a><br><a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a><br><a href="https://albenw.github.io/posts/3454819c/" target="_blank" rel="noopener">https://albenw.github.io/posts/3454819c/</a><br><a href="https://segmentfault.com/a/1190000018250408?utm_source=tag-newest" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018250408?utm_source=tag-newest</a><br><a href="https://www.cnblogs.com/kex1n/p/5229493.html" target="_blank" rel="noopener">https://www.cnblogs.com/kex1n/p/5229493.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;一直想搭建一个个人博客，无奈有拖延症，一直拖到现在。为什么开始做了呢？最近压力很大，为了防止乱花钱，给自己找点事做。于是，兜
      
    
    </summary>
    
      <category term="静态博客" scheme="https://muhouer.github.io/categories/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://muhouer.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://muhouer.github.io/posts/4a17b156/"/>
    <id>https://muhouer.github.io/posts/4a17b156/</id>
    <published>2019-06-25T15:22:52.506Z</published>
    <updated>2019-07-11T16:57:05.300Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
